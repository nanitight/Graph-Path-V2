{"version":3,"sources":["components/Reusable/PopUpMessage.js","components/Helpers/DAG.js","components/Helpers/GraphManager.js","components/Reusable/CustomField.js","components/Task.js","components/Graph.js","components/ProjectInformation.js","components/Project.js","components/Reusable/ProjectCard.js","components/NewProject.js","components/ProjectManager.js","img/Logo3.png","components/Profile.js","components/Logout.js","img/Logo4.png","components/Kanban.js","components/RadarChart.js","components/PieChart.js","components/Calendar.js","components/BarChart.js","components/Dashboard.js","components/LoginBtn.js","img/graph_2.svg","img/dashboard.jpg","img/createp.jpg","img/graph.jpg","img/stats1.jpg","img/stats2.jpg","components/Landing.js","components/NotFound.js","components/Header.js","components/Helpers/Reducer.js","App.js","reportWebVitals.js","index.js"],"names":["PopUpMessage","text","type","indexOf","toString","Notification","title","toUpperCase","description","duration","placement","info","isAcyclicRec","node","stack","Nodes","includes","isNodeInStack","isVisit","id","i","length","VisitNode","push","children","adjacent","getNodeByID","removeNodeFromStack","isAcyclic","graph","JSON","stringify","console","log","nodes","Edges","edges","NodeObj","weight","sourceID","from","TargetNode","to","k","SetNodes","jsgraph","require","GraphManager","adjacencyList","addVertex","vertex","editNodeCriticality","nodeId","critical","nodeFound","filter","createTraversableGraph","undefined","map","x","edge","index","y","forEach","addAdjacencyEdge","pathFromBFS","start","currVertex","queue","paths","result","visited","shift","currNode","find","n","color","neighbor","findShortestPath","end","numVertex","criticalGraph","WeightedDiGraph","parseInt","substr","addEdge","Edge","endNumber","Dijkstra","hasPathTo","pathTo","findFromTraversable","endNode","a","found","curr","v","pathFromDFS","Object","keys","s","pop","c","temp","unshift","highlightGraphCritical","internalBFS","path","changeEdgeColor","removeEdge","source","target","removeVertex","adjacentVertex","changeColor","Array","isArray","ind","value","splice","colorArray","edg","setGraph","getGraph","src","tgt","edgeId","edgeAlreadyInGraph","allIds","label","width","nameSrc","nameTgt","removeNode","newNodes","newGraph","newEdges","removeEdgeWithEdgeId","edgesAfter","addNode","fromTask","obj","size","len","startNode","updatePosition","nodeID","this","CustomField","props","name","message","accepter","error","FormGroup","className","ControlLabel","FormControl","errorMessage","HelpBlock","React","PureComponent","Task","now","Date","DateType","Schema","Types","StringType","dueDate","getFullYear","minDate","getMonth","getDate","taskModel","Model","minLength","isRequired","issued","min","due","handleTaskCreation","form","event","setState","formValue","handleTaskErrors","formError","handleTaskSubmit","state","check","updated","d1","format","editTask","sendTaskInfo","newTask","fullTask","assign","updateNode","switchToEditTask","getDefaultFormState","toJSON","slice","status","taskMembers","toogleScreen","def","taskObj","formValue2","handleSortChange","newStatus","createNewTask","Form","model","ref","onCheck","onChange","placeholder","tooltip","DatePicker","oneTap","RadioGroup","inline","Radio","Button","onClick","listAllTasks","nodeTasks","task","projMembers","members","mem","email","Panel","bordered","header","Icon","icon","SelectPicker","data","CheckPicker","spin","PanelGroup","accordion","deleteTask","_id","deleteAll","tasks","deleteNodeTasks","alert","assignee","assigner","appearance","Component","propType","PropTypes","array","func","GraphPath","graphManager","initialGraph","viewAllTasksForProject","callback","project","loading","projectId","axios","get","api","then","res","allTasks","taskList","showTask","catch","err","showNodeForm","showNode","filterByID","showTaskModal","selected","currGraph","nodeLabel","currNodeID","currNodeName","currNodeId","nodeTask","handleChange","nodeName","handleCritical","updateGraph","withsave","saveProjectGraph","addNewNode","trim","cleanUpAfterNodeAddition","createEdgeBetweenNode","addedEdge","cleanUpAfterEdgeAddition","deleteAllNodeTask","validateGraphDifference","oldG","newG","diff","checkSavePermissions","minimalGraph","projectID","loggedUser","patch","headers","authorization","token","answer","response","saveNodeTask","nodePreInfo","permissions","post","taskRes","errors","split","nodeCompletionStatus","changeNodeByStats","clickNodeHandler","nodeAffected","captor","altKey","ctrlKey","shiftKey","deleteOneTask","taskId","window","confirm","delete","taskID","newTaskModal","Modal","show","keyboard","onHide","overflow","backdrop","Header","Title","Body","groupMembers","showMsg","graphObj","parse","semiUpdate","updateParent","stats","speaker","Popover","visible","onSubmit","Checkbox","checked","options","layout","randomSeed","improvedLayout","clusterThreshold","physics","shape","font","face","background","strokeWidth","strokeColor","align","arrowStrikethrough","arrows","enabled","imageHeight","events","externalDragUpdate","dragEnd","nodesAffected","pointer","canvas","update","externalRemoveNode","externalRemoveEdge","externalCreateEdge","viewTaskInfo","click","srcEvent","edgesAffected","currE","Loader","speed","projectName","Whisper","trigger","IconButton","getNetwork","network","stabilize","defaultProps","connect","withRouter","ProjectInformation","handleViewMembers","showAddMembers","showModal","handleAddMembers","e","preventDefault","memberName","user","role","addMember","projectMembers","item","resp","addMemberModal","editMember","enableEdit","disabled","owner","projectOwner","projName","projDescription","projectDescription","startD","startDate","dueD","sendData","disable","put","removeMember","Error","statusText","handleEditRole","MemberEditEmail","handleCloseEdit","updateRole","change","getAllUsers","allMembersFromDb","saveMember","list","defaultValue","required","Drawer","Divider","style","textAlign","FlexboxGrid","justify","sticky","onSelect","Item","colspan","md","CheckboxGroup","Footer","variant","Project","match","Sidebar","collapsible","Sidenav","Nav","pullRight","vertical","componentClass","Link","url","exact","render","selectProject","ProjectCard","deleteProject","link","projectInfo","member","shaded","bodyFill","display","lastAccessed","NewProject","cleanUp","next","handleSubmit","sendProjectInfo","handleShow","handleNext","handleInfoChange","handleProjectErrors","setFullYear","projectModel","ProjectManager","viewProjectsFromAPI","projects","allProjects","selectCurrentProject","currentProject","updateLastAcessed","accessedProject","lastDateAccessed","projId","sortValue","sortProjects","handleFilterChange","filterValue","filterProjects","newArray","sort","v1","v2","date1","toLowerCase","date2","sortedArray","projectsByEmail1","myProjects1","projectsByEmail2","myProjects2","newProjectModalRef","showM","updateUserToken","reject","key","filteredProjects","mapDispatchToProps","payload","Profile","handleClose","picture","full","Logo","Logout","logout","useAuth0","Kanban","firstSearch","count","j","Priority","newID","projectsByEmail","onDropHandler","onDragStop","updateChanges","onDataBound","newData","myData2","nyData3","test","fields","heading","keyField","headerText","lineHeight","tableLayout","colSpan","userInput","searchValue","searchQuery","Query","search","kanbanObj","query","document","getElementById","reset","element","cssClass","enableTooltip","dataSource","cardSettings","contentField","headerField","template","cardTemplate","bind","swimlaneSettings","textField","cardClick","handler","dragStop","dataBound","kanban","columnTemplate","textBoxObj","showClearButton","onFocus","input","searchClick","resetClick","RadarChart","getProjectChart","showChart","getAllProjects","Dropdown","minWidth","marginRight","List","hover","labels","datasets","fill","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","height","maintainAspectRatio","elements","line","borderWidth","scales","r","angleLines","alt","PieChart","getChartStats","notStartedTasks","inProgressTasks","hoverOffset","finishedTasks","Calendar","getUserProjects","date","plugins","dayGridPlugin","initialView","weekends","BarChart","Dashboard","handleSideBar","showSideBar","profileModalRef","showProfile","changeRedirect","redirect","showP","reloadProjectsInManager","createResponse","viewOnly","authUser","LoginBtn","loginWithRedirect","Landing","logInvalid","isAuthenticated","isLoading","content","Graph_Picture","Carousel","autoplay","dashboard","createP","stats1","stats2","email_verified","NotFound","history","useHistory","location","pathname","CustomHeader","changeLogStatus","userObject","createUser","logged","signInMododal","openSignin","show1","show2","close","open","component","initial","store","createStore","action","auth","newState","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","domain","process","REACT_APP_AUTH0_DOMAIN","clientId","REACT_APP_AUTH0_CLIENT_ID","ReactDOM","redirectUri","origin"],"mappings":"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","file":"static/js/main.772fc457.chunk.js","sourcesContent":["// import React from 'react';\r\nimport '../../css/PopUpMessage.css' ;\r\nimport { Notification } from 'rsuite';\r\n// import PropTypes from 'prop-types' ;\r\n\r\n\r\nfunction PopUpMessage(text,type ){\r\n\r\n    if (['info','success','warning','error'].indexOf(type.toString())>0 ){\r\n        Notification[type]({\r\n            title: type.toUpperCase() ,\r\n            description:text  ,\r\n            duration:3000, \r\n            placement:'topEnd' \r\n        }) ;\r\n    }\r\n    else {\r\n        Notification.info({\r\n            description:text ,\r\n            duration: 3000 ,\r\n        })\r\n    }\r\n\r\n    \r\n    \r\n}\r\n\r\n// PopUpMessage.propTypes ={\r\n//     type : PropTypes.objectOf() ,\r\n//     text : PropTypes.string.isRequired ,\r\n// }\r\n\r\nexport default PopUpMessage;","\r\nfunction isAcyclic(graph)\r\n{\r\n\r\n    if (JSON.stringify(graph) === '{}')\r\n    {\r\n        console.log();\r\n        return true\r\n    }\r\n\r\n\r\n\r\n    else if (graph.nodes.length === 0)\r\n    {\r\n        return true;\r\n    }\r\n\r\n\r\n    else\r\n    {\r\n\r\n        let stack = [];\r\n        let Nodes = SetNodes(graph);\r\n\r\n        // console.log(Nodes);\r\n        for( let i = 0 ; i < Nodes.length ; i ++)\r\n        {\r\n            //console.log(Nodes);\r\n            if(isAcyclicRec(Nodes[i],stack,Nodes))\r\n            {\r\n\r\n                //console.log(\"Graph is not DAG\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //console.log(\"Graph is  DAG\");\r\n        return true;\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction isAcyclicRec(node,stack,Nodes)\r\n{\r\n\r\n    if(isNodeInStack(node,stack))\r\n        return true;\r\n\r\n    if(node.isVisit === true)\r\n        return false;\r\n\r\n    VisitNode(node.id,Nodes);\r\n    stack.push(node);\r\n\r\n    let children = node.adjacent;\r\n    for( let i =0 ; i  < children.length ; i++)\r\n    {\r\n\r\n        if(isAcyclicRec(getNodeByID(children[i],Nodes),stack,Nodes))\r\n            return true;\r\n    }\r\n    removeNodeFromStack(node,stack);\r\n    return false;\r\n\r\n\r\n}\r\n\r\nfunction SetNodes(graph)\r\n{\r\n    let Nodes = [];\r\n    let Edges = graph.edges;\r\n\r\n    // setting the Nodes data Structure\r\n    for( let i = 0 ; i < graph.nodes.length; i++ )\r\n    {\r\n        let NodeObj = {\r\n            id: graph.nodes[i].id,\r\n            adjacent : [],\r\n            weight: 0,\r\n            isVisit: false,\r\n        }\r\n        Nodes.push(NodeObj);\r\n\r\n    }\r\n\r\n    // setting Adjacent Nodes neighbours\r\n    for( let i =0 ; i < Edges.length ; i ++)\r\n    {\r\n\r\n        let sourceID = Edges[i].from;\r\n        let targetID = Edges[i].to;\r\n        let TargetNode = getNodeByID(targetID,Nodes);\r\n        for( let k = 0 ; k < Nodes.length ; k ++)\r\n        {\r\n            if( Nodes[k].id === sourceID)\r\n            {\r\n                Nodes[k].adjacent.push(TargetNode.id);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return Nodes;\r\n\r\n}\r\n\r\nfunction getNodeByID(id,Nodes)\r\n{\r\n    for( let i =0 ; i < Nodes.length; i ++)\r\n    {\r\n\r\n        if(Nodes[i].id === id)\r\n        {\r\n\r\n            return Nodes[i];\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nfunction isNodeInStack(node, stack)\r\n{\r\n\r\n    return stack.includes(node);\r\n}\r\n\r\nfunction removeNodeFromStack(node,stack)\r\n{\r\n\r\n    for( let i =0 ; i < stack.length ; i ++)\r\n    {\r\n\r\n        if(stack[i] === node)\r\n        {\r\n            stack[i] =null;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction VisitNode(id, Nodes)\r\n{\r\n\r\n    for( let i =0 ; i < Nodes.length; i ++)\r\n    {\r\n\r\n        if(Nodes[i].id === id)\r\n        {\r\n\r\n            Nodes[i].isVisit = true;\r\n            return;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default isAcyclic ;\r\n","import isAcyclic from \"./DAG\";\r\n\r\nvar jsgraph = require('js-graph-algorithms') ;// {TopologicalSortShortestPaths,WeightedDiGraph,Edge} from 'js-graph-algorithms' ;\r\n\r\nclass GraphManager{\r\n  /**\r\n   * @member {Object} graph - the graph representation of project. \r\n   * */ \r\n    graph = {\r\n      nodes:[] ,\r\n      edges: []\r\n    } ; \r\n\r\n    /**\r\n     * @member {Object} adjacencyList - adjacency representation of the graph \r\n     * \r\n    */\r\n    adjacencyList = {} ; \r\n\r\n    // criticalGraph = {} ;// jsgraph.WeightedDiGraph(0) ;\r\n\r\n    constructor(graph){\r\n      if (graph === undefined || graph.nodes === undefined || graph.edges === undefined){\r\n        this.setGraph({}) ;\r\n      }\r\n      else{\r\n        this.graph = graph ;\r\n      }\r\n      this.adjacencyList = {} ;\r\n    }\r\n\r\n    addVertex=(vertex)=>{\r\n      if (!this.adjacencyList[vertex]){\r\n        // if it does not exist\r\n        this.adjacencyList[vertex] = [] ;\r\n      }\r\n    }\r\n    addAdjacencyEdge(source,target){\r\n      if (!this.adjacencyList[source]){\r\n        this.addVertex(source) ;\r\n      }\r\n\r\n      if (this.adjacencyList[source].indexOf(target)<0){\r\n        this.adjacencyList[source].push(target) ;\r\n      }\r\n      // this.adjacencyList[source].sort((a,b)=>a-b) ;\r\n\r\n    }\r\n\r\n    editNodeCriticality=(nodeId,critical)=>{\r\n      var nodeFound = this.graph.nodes.filter(node => node.id === nodeId) ;\r\n      if (nodeFound.length){\r\n        nodeFound[0][`critical`]=critical ;\r\n        return true ;\r\n      }\r\n      else{\r\n        return false ;\r\n      }\r\n    }\r\n\r\n    createTraversableGraph =()=>{\r\n      this.adjacencyList = {} ;\r\n      const nodes = this.graph.nodes ;\r\n      const edges = this.graph.edges ;\r\n\r\n      if (nodes !== undefined && edges !== undefined){\r\n        for (let x of nodes.map(node => node.id)){\r\n          this.addVertex(x) ;\r\n          const edgesFiltered = this.graph.edges.filter((edge,index) =>{\r\n            let y = {...edge} ;\r\n            y['color'] ='#080' ;\r\n            this.graph.edges[index] = y ;\r\n          \r\n            if ( edge.from=== x){\r\n              return y ;\r\n            }\r\n            else{\r\n              return false ;\r\n            }\r\n          }) ;\r\n\r\n          edgesFiltered.forEach((y)=>{\r\n            this.addAdjacencyEdge(x,y.to) ;\r\n          }) \r\n          \r\n          \r\n        }\r\n      }\r\n    }\r\n\r\n    pathFromBFS= (start)=>{\r\n      this.createTraversableGraph() ;\r\n      //bfs -- queue ;FIFO\r\n      var queue = [start] ;\r\n      var paths = [] ;\r\n      var result = [] ; \r\n      var visited = {} ;\r\n      visited[start] = true ;\r\n      let currVertex ;\r\n      while (queue.length){\r\n        currVertex = queue.shift() ;\r\n        if (currVertex !== undefined){\r\n         console.log('curr',currVertex) ;\r\n\r\n        let currNode = this.graph.nodes.find(n=>n.id === currVertex ) ;\r\n        //  console.log('currNode',currNode) ;\r\n\r\n          if ( currNode !== undefined){\r\n            if ( currNode.critical){\r\n              currNode.color = '#880' ;\r\n              // console.log('path',path,currVertex) ;\r\n              paths.push(currNode.id) ;\r\n            }\r\n          }\r\n        //  console.log('prev',result[result.length-1],'curr',currVertex) ;\r\n          result.push(currVertex) ;\r\n          this.adjacencyList[currVertex].forEach((neighbor)=>{\r\n            if (!visited[neighbor]){\r\n              visited[neighbor] = true ;\r\n              queue.push(neighbor) ;\r\n            }\r\n          })\r\n        }\r\n      }\r\n      // console.log('adja',this.adjacencyList) ;\r\n\r\n      return {\r\n        paths: paths,\r\n        result:result };\r\n\r\n    }\r\n\r\n    findShortestPath=(end)=>{\r\n      const numVertex = this.graph.nodes.length ;\r\n\r\n      var criticalGraph = new jsgraph.WeightedDiGraph(numVertex) ;\r\n\r\n      if (criticalGraph !== undefined){\r\n        // delete this.criticalGraph ;\r\n      \r\n        for (let edge of this.graph.edges){\r\n          const from = parseInt(edge.from.substr(1,edge.from.length-1)) ;\r\n          const to = parseInt(edge.to.substr(1,edge.to.length-1)) ;\r\n          // let newE = new jsgraph.Edge(from,to,10) ;\r\n          // console.log('add',from,'to',to) ;\r\n          criticalGraph.addEdge(new jsgraph.Edge(from,to,10)) ;\r\n        }\r\n        const endNumber = parseInt(end.substr(end.length-1)) ;\r\n        var critical = new jsgraph.Dijkstra(criticalGraph,0) ;\r\n        // console.log('endo',endNumber,critical) ;\r\n\r\n        if (critical.hasPathTo(endNumber)){\r\n          var path = critical.pathTo(endNumber) ;\r\n          // console.log('path to',path,endNumber) ;\r\n          return path ;\r\n        }\r\n        else{\r\n          return [] ;\r\n        }\r\n    }\r\n    }\r\n\r\n    findFromTraversable= async (endNode)=>{\r\n      // console.log('finding from traversable')\r\n\r\n      let result = [] ;\r\n      let found = false;\r\n      let queue = ['n0'] ; \r\n      let visited = [] ;\r\n      while(found === false && queue.length){\r\n        let curr = queue.shift() ;\r\n        visited.push(curr) ;\r\n        if (this.adjacencyList[curr].indexOf(endNode)>=0){\r\n          found = true ;\r\n            // console.log('push',endNode,visited)\r\n\r\n          result.push(endNode)\r\n        }\r\n        else{\r\n          for (let v of this.adjacencyList[curr]){\r\n            if (visited.indexOf(v)<0){\r\n              queue.push(v) ;\r\n            }\r\n          }\r\n          console.log('push',curr)\r\n\r\n          result.push(curr)\r\n        }\r\n      }\r\n      // console.log('found?',found)\r\n\r\n      if (found){\r\n        return result ;\r\n      }\r\n      else{\r\n        return ['n0'] ;//was't found\r\n      }\r\n    }\r\n\r\n    pathFromDFS =(start)=>{\r\n      this.createTraversableGraph() ;\r\n      var visited = {} ;\r\n      for ( let node of Object.keys(this.adjacencyList)){\r\n        // console.log('Node:',node)\r\n        visited[node] = false ;\r\n      }\r\n\r\n      var paths =[] ; //Array of array , will return path to all critical nodes. \r\n\r\n      let stack = [] ;\r\n      stack.push(start) ;\r\n      var result = [] ;\r\n      while(stack.length !== 0){\r\n        let s = stack.pop() ;\r\n        if (s !== undefined){\r\n          if (visited[s] === false){\r\n            result.push(s) ;\r\n            visited[s] = true ;\r\n            var currNode = this.graph.nodes.find(node => node.id === s ) ; \r\n            if (currNode !== undefined && !currNode.critical){\r\n              // console.log('not critical')\r\n            }\r\n            else{\r\n              // console.log(' critical',result)\r\n              //create path\r\n              let c = result.pop() ; \r\n              let temp = [] ; \r\n              while (c !== start){\r\n                temp.unshift(c) ; \r\n                c = result.pop() ;\r\n              } \r\n              temp.unshift(start) ;\r\n              paths.push(temp) ;\r\n              result.push(start) ; \r\n\r\n            }\r\n          }\r\n          for (let neighbor of this.adjacencyList[s]){\r\n            if (!visited[neighbor]){\r\n              stack.push(neighbor) ; \r\n\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n      // console.log('Result' ,paths)\r\n      return paths ; \r\n    }\r\n\r\n    \r\n\r\n    highlightGraphCritical=()=>{\r\n        var internalBFS = this.pathFromBFS('n0') ;\r\n        var paths = internalBFS.paths ;\r\n        // console.log('color to node',paths)\r\n        let ans = paths.length ; \r\n        let color = [] ;\r\n        if (ans){\r\n          for (let node of paths){\r\n            let path = this.findShortestPath(node) ;\r\n            color.push(path) ;\r\n          }\r\n        // console.log('color the nodes',color) ;\r\n        this.changeEdgeColor(color,'#880')\r\n\r\n          return color.length ;\r\n          //edit the color to red\r\n          // const colorEdges = this.graph.edges.map((value)=>{\r\n          //   var del = path.indexOf(value.to) ;\r\n          //   if (value.from === 'n0'){\r\n          //     if (del>=0){\r\n          //       path = path.splice(del,1) ;\r\n          //       let newE = {...value} ; \r\n          //       newE['color'] = '#200' ;\r\n          //       // console.log('colored edge', newE)\r\n          //       return newE ;\r\n          //     }\r\n          //     else{\r\n          //       return value\r\n          //     }\r\n          //   }\r\n          //   else{\r\n          //     if (del>=0){\r\n          //       let newE = {...value} ; \r\n          //       newE['color'] = '#200' ;\r\n          //       // console.log('colored edge', newE)\r\n          //       return newE ; \r\n          //     }\r\n          //     else{\r\n          //       return value\r\n\r\n          //     }\r\n          //   }\r\n          // }) ;\r\n\r\n          \r\n\r\n\r\n          // this.graph.edges = colorEdges ;\r\n          // return true ;\r\n\r\n        }\r\n        \r\n        /**\r\n         * @returns ans - number of critical nodes paths , if start node nofr connected it reurns -1\r\n         */\r\n        if (internalBFS.result.length > 1){\r\n          return color.length ;\r\n        }\r\n        else{\r\n          return -1;\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    removeEdge=(source,target)=>{\r\n      this.adjacencyList[source] = this.adjacencyList[source].filter(vertex =>\r\n        vertex !== target \r\n      ) ;\r\n    }\r\n\r\n    removeVertex=(vertex)=>{\r\n      while(this.adjacencyList[vertex]){\r\n        const adjacentVertex = this.adjacencyList[vertex].pop() ;\r\n        this.removeEdge(vertex,adjacentVertex) ;\r\n      }\r\n      delete this.adjacencyList[vertex] ;\r\n    }\r\n\r\n    changeColor=(id,color)=>{\r\n      var nodes = this.graph.nodes ;\r\n      if (nodes && Array.isArray(nodes)){\r\n        let ind = -1 ;\r\n        let found = nodes.find((value,i)=>{if (value.id === id){\r\n          ind = i ;\r\n          return value ; \r\n        }}) ;\r\n        if (found && ind >= 0 ){\r\n          found.color = color ;\r\n          nodes.splice(ind,1,found) ;\r\n          this.graph.nodes = nodes ;\r\n          return 1 ;\r\n        }\r\n      }\r\n      return 0 ; \r\n    }\r\n    /**\r\n     * @param colorArray - an array of egdes to color\r\n    */\r\n    changeEdgeColor = (colorArray,color) =>{\r\n      var edges = this.graph.edges ;\r\n      if (Array.isArray(edges)){\r\n        // let criticalEdge = edges.map((value)=>{\r\n        //   if (value)\r\n        //   return value ; \r\n        // })\r\n      \r\n        for (let path of colorArray){\r\n          for (let edg of path){\r\n            let ind = edges.find(value=>value.from === `n${edg.from()}` &&\r\n            value.to === `n${edg.to()}`) ;\r\n            ind.color = color ;\r\n          // console.log('color e',ind)\r\n\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    setGraph = (graph)=>{\r\n      console.log('MGR set old:',this.graph,'new:',graph) ;\r\n\r\n      if (Array.isArray(graph.nodes) && Array.isArray(graph.edges) ){\r\n        this.graph = graph ;\r\n      }\r\n      else{\r\n        this.graph = {\r\n            nodes : [],\r\n            edges : []\r\n        }\r\n      }\r\n    }\r\n\r\n    getGraph=()=>{\r\n      // console.log('MGR get',this.graph)\r\n      return this.graph ;\r\n    }\r\n\r\n    showNodeList(){\r\n      var nodes = this.graph.nodes ; \r\n      if(nodes.length <= 0){\r\n        // console.log('Nothing in the Array') ; \r\n      }\r\n      else{\r\n        console.log(`${nodes.length} Nodes`)\r\n      }\r\n    }\r\n\r\n    addEdge=(src,tgt)=>{\r\n     \r\n      let edgeId = 1;\r\n      let edgeAlreadyInGraph = false ;\r\n      let allIds = this.graph.edges.map((value)=>{\r\n        if (value.from === src && value.to ===tgt ){\r\n          edgeAlreadyInGraph = true ;\r\n        }\r\n        return value.id ;\r\n      });\r\n\r\n      if (edgeAlreadyInGraph === true){\r\n        //edge exists\r\n        return 2 ;\r\n      }\r\n      else{\r\n        while (allIds.indexOf(`e${edgeId}`)>=0){\r\n          edgeId = edgeId+1 ;\r\n        }\r\n  \r\n        var edg = {\r\n              id:`e${edgeId}`, // give edge an id\r\n              from:src, \r\n              to:tgt,\r\n              label:`${ src} to ${tgt}` ,\r\n              color:'#000',\r\n              width:7\r\n          }\r\n        let nameSrc = this.graph.nodes.find(v=>v.id === src) ;\r\n        let nameTgt = this.graph.nodes.find(v=>v.id === tgt) ;\r\n        if(nameSrc !== undefined && nameTgt !== undefined){\r\n              edg[\"label\"] = `${ nameSrc.label} to -> ${nameTgt.label}` ;\r\n        }\r\n          this.graph.edges.push(edg) ; \r\n  \r\n        if (!isAcyclic(this.graph)){   \r\n          this.graph.edges.pop() ; \r\n          \r\n          //cyclic edge\r\n          return 0 ;\r\n        }\r\n        else{\r\n        //  this.graph = copy ; \r\n          //true - add \r\n          return 1 ;\r\n        }\r\n  \r\n      }\r\n\r\n      \r\n    }\r\n\r\n    removeNode = (id)=>{\r\n\r\n\r\n      var newNodes = this.graph.nodes.filter((node)=>{\r\n        if (node.id !== id){\r\n          return true ;\r\n        }\r\n        return false ;\r\n      }) ;\r\n      if (this.graph.nodes.length === newNodes.length){\r\n        return false ;\r\n      }\r\n      else{\r\n        //delete edges where node with id is source || target\r\n        var newGraph = {nodes:[],edges:[]} ;\r\n        newGraph.nodes = newNodes ;\r\n        if (this.graph.edges.length>0){\r\n          var newEdges = this.graph.edges.filter((edge)=>{\r\n            if (edge.from === id ){\r\n              return false\r\n            }\r\n            else if ( edge.to === id){\r\n              return false ;\r\n            }\r\n            else{\r\n              return true ;\r\n\r\n            }\r\n          }) ;\r\n          // console.log('new edges',newEdges)\r\n            newGraph.edges = newEdges ;\r\n            this.graph = newGraph ;\r\n          return true ;\r\n          \r\n        }\r\n        else{\r\n\r\n          this.graph = newGraph ;\r\n          return true ;\r\n\r\n        }\r\n\r\n      };\r\n\r\n    }\r\n\r\n    removeEdgeWithEdgeId = (edgeId)=>{\r\n      var edgesAfter = this.graph.edges.filter((edge)=>{\r\n        if (edge.id !== edgeId){\r\n          return true ;\r\n        }\r\n        return false ;\r\n      }) ; \r\n      if (this.graph.edges.length === edgesAfter.length){\r\n        return false ;\r\n      }\r\n      else{\r\n        this.graph.edges = edgesAfter ;\r\n        return true ;\r\n      }\r\n    }\r\n    \r\n    addNode = (fromTask) =>{\r\n        // add the node and give it an id\r\n        var curr = this.graph ; \r\n        var obj = {\r\n            label:fromTask.label , // give it lable fromTask\r\n            size:20,\r\n            critical:fromTask.critical\r\n        }; \r\n      // console.log('Manager:addNode',fromTask,obj) ; \r\n\r\n        // if there was already a node?\r\n        let len = curr.nodes.length ;\r\n        if (len>0){\r\n            let nodeId = 1;\r\n            let allIds = this.graph.nodes.map((value)=>{\r\n              return value.id ;\r\n            })\r\n            while (allIds.indexOf(`n${nodeId}`)>=0){\r\n              nodeId = nodeId+1 ;\r\n            }\r\n\r\n            obj[\"id\"]= `n${nodeId}` ;\r\n            obj[\"color\"] = '#f00000' ; //following nodes are blue\r\n            if (len % 2 === 0){\r\n                obj[\"x\"] = 2*len ; \r\n                obj[\"y\"] = -2*len ;\r\n            }\r\n            else{\r\n                obj[\"x\"] = 2*len ; \r\n                obj[\"y\"] = 15*len ;\r\n            }\r\n        }\r\n        else{\r\n            // add node with edge depending on self\r\n            let startNode = {...obj}\r\n\r\n            obj[\"id\"]= `n1` ;\r\n            obj[\"color\"] = '#ea0000' ; //start is red\r\n            obj[\"x\"] = 0 ; \r\n            obj[\"y\"] = 0 ;\r\n\r\n            startNode[\"id\"]= `n0` ;\r\n            startNode[\"color\"] = '#900' ; //start is red\r\n            startNode[\"x\"] = 0 ; \r\n            startNode[\"y\"] = -160 ;\r\n            startNode[\"critical\"] = false ;\r\n            startNode[\"label\"] = 'Start' ;\r\n            this.graph.nodes.push(startNode) ;\r\n        }\r\n        \r\n        this.graph.nodes.push(obj) ;\r\n        // console.log('Manager:',this.graph) ; \r\n      \r\n    }\r\n\r\n    updatePosition=(nodeID,x,y)=>{\r\n      let ind = -1 ;\r\n      let node = this.graph.nodes.find((value,i)=>{if (value.id === nodeID){\r\n        ind = i ;\r\n        return value ; }}) ; \r\n      if (node && ind >=0 ){\r\n        node.x =  x ; \r\n        node.y = y ;\r\n        this.graph.nodes[ind] = node ;\r\n        return 1 ;\r\n      }\r\n      return 0 ; \r\n    }\r\n    \r\n}\r\n\r\nexport default GraphManager ;\r\n\r\n// for (let i = 0 ; i < path.length-1 ; i++){\r\n          //   let source = path[i] ;\r\n          //   let tar = path[i+1] ;\r\n          //   let ind = -1 ;\r\n          //   let colorEdge = this.graph.edges.find( (edge,index)=>{\r\n          //     ind = index ;\r\n          //     if (edge.from === source && edge.to === tar){\r\n          //       return edge ;\r\n          //     }\r\n          //     else{\r\n          //       return undefined\r\n          //     }\r\n          //   } ) ; \r\n          //   if (colorEdge !== undefined && ind>=0){\r\n          //     colorEdge.color = '#200' ;\r\n          //     this.graph.edges[ind] = colorEdge ;\r\n          //     // console.log('Auth',this.graph.edges[ind],'after update')\r\n          //   }\r\n          //   // console.log('Auth',this.graph.edges[ind],'after update')\r\n\r\n          // }","import React from 'react';\r\nimport {FormGroup,FormControl,ControlLabel,HelpBlock} from 'rsuite';\r\n\r\nclass CustomField extends React.PureComponent {\r\n    render() {\r\n      const { name, message, label, accepter, error, ...props } = this.props;\r\n      return (\r\n        <FormGroup className={error ? 'has-error' : ''}>\r\n          <ControlLabel>{label} </ControlLabel>\r\n          <FormControl\r\n            name={name}\r\n            accepter={accepter}\r\n            errorMessage={error}\r\n            {...props}\r\n          />\r\n          <HelpBlock>{message}</HelpBlock>\r\n        </FormGroup>\r\n      );\r\n    }\r\n}\r\n\r\nexport default CustomField ;","import React from 'react' ;\r\nimport PropTypes from 'prop-types' ;\r\nimport {Schema,CheckPicker,SelectPicker,Icon,FormControl,Button,Form,FormGroup,HelpBlock,DatePicker,ControlLabel, RadioGroup, Radio, Panel, PanelGroup} from 'rsuite' ;\r\nimport CustomField from './Reusable/CustomField';\r\nimport  '../css/Common.css' ;\r\nimport {format} from 'date-fns' ;\r\n\r\n\r\n\r\n/**\r\n * Task will show a list of the tasks provided for a node. \r\n * It will also provide a way to add new tasks to the node\r\n * Furthermore, it will also provide a way to delete one task or all tasks\r\n */\r\n\r\nclass Task extends React.Component {\r\n    \r\n    constructor(props){\r\n        super(props) ;        \r\n        this.state = {\r\n            assignee:[],\r\n            assigner:{},\r\n            newTask:false, //if true return form for new task\r\n            editTask:{},\r\n            newStatus:'not started',\r\n            formValue:{\r\n                description: '' , \r\n                issued: new Date(this.now.getFullYear(),this.now.getMonth(),this.now.getDate()).toJSON().slice(0,10) ,\r\n                due: new Date(this.now.getFullYear(),this.now.getMonth()+1,this.now.getDate()).toJSON().slice(0,10),\r\n                status:'not started',\r\n                taskMembers:[]\r\n            },\r\n            formError:{}\r\n\r\n        }\r\n    }\r\n\r\n    //private fields\r\n    now = new Date() ;\r\n\r\n    DateType = Schema.Types.DateType ;\r\n    StringType = Schema.Types.StringType ;\r\n    dueDate = new Date(this.now.getFullYear()) ;\r\n    minDate = new Date(this.now.getFullYear(),this.now.getMonth(),this.now.getDate()-1) ;\r\n    \r\n    taskModel = Schema.Model({\r\n        description: this.StringType().minLength(5,'Please add more details on the description')\r\n            .isRequired('This field is required.') ,\r\n        issued:this.DateType().min(this.minDate,'The issued date cannot be set to a date that has passed.')\r\n            .isRequired('This field is required.') ,\r\n        due:this.DateType().min(this.dueDate,'The due date cannot be set to a date that has passed.')\r\n            .isRequired('This field is required.') ,\r\n    })\r\n    // EOF provate fields\r\n\r\n\r\n    handleTaskCreation =(form,event)=>{\r\n        console.log('Form ',form)\r\n\r\n        this.setState({\r\n            formValue:form\r\n        }) ;\r\n    }\r\n\r\n    handleTaskErrors = (formError)=>{\r\n        this.setState({\r\n            formError\r\n        }) ;\r\n    }\r\n\r\n  \r\n    handleTaskSubmit =()=>{\r\n        const {formValue} = this.state ;\r\n        if (!this.form.check()){\r\n            console.log('Form error')\r\n        }\r\n        else{\r\n            let updated = {...formValue} ;\r\n            if ( formValue.due instanceof Date ){\r\n                // console.log('yes Due is Date',updated)    \r\n                let d1 = format(updated.due,'yyyy-MM-dd')\r\n                updated.due = d1 ;\r\n            }\r\n    \r\n            if (formValue.issued instanceof Date ){\r\n                // console.log('yes issued is Date')\r\n                let d1 = format(updated.issued,'yyyy-MM-dd')\r\n                updated.issued = d1 ; \r\n            }\r\n    \r\n            // alert('saved') ;\r\n            console.log('selected submit',updated) ; \r\n\r\n            if (this.state.editTask.nodeID === undefined){\r\n                this.props.sendTaskInfo(updated) ;\r\n                this.setState({\r\n                    newTask:!this.state.newTask\r\n                }) ;\r\n            }\r\n            else{\r\n                let fullTask = Object.assign(this.state.editTask,updated) ;\r\n                this.props.updateNode(fullTask) ;\r\n                this.switchToEditTask({}) ; //switch view\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    getDefaultFormState=()=>{\r\n        return {\r\n            description: '' , \r\n            issued: new Date(this.now.getFullYear(),this.now.getMonth(),this.now.getDate()).toJSON().slice(0,10) ,\r\n            due: new Date(this.now.getFullYear(),this.now.getMonth()+1,this.now.getDate()).toJSON().slice(0,10),\r\n            status:'not started',\r\n            taskMembers:[]\r\n        }\r\n    }\r\n\r\n    \r\n    toogleScreen=()=>{\r\n        // console.log('toggled')\r\n        let def = this.getDefaultFormState() ;\r\n        this.setState({\r\n            newTask: !this.state.newTask,\r\n            formValue:def,\r\n            formError:{},\r\n            editTask:{}\r\n\r\n        }) ;\r\n    }\r\n\r\n    switchToEditTask = (taskObj) =>{\r\n        console.log('selected for edit',taskObj) ; \r\n        \r\n        let formValue2 = {...this.state.formValue} ;\r\n        if (taskObj.nodeID !== undefined){    \r\n            formValue2.description = taskObj.description ; \r\n            formValue2.due = taskObj.due ; \r\n            formValue2.taskMembers = taskObj.taskMembers ;\r\n            formValue2.status = taskObj.status ;\r\n        }\r\n        else{\r\n            formValue2 = this.getDefaultFormState() ;\r\n        }\r\n        this.setState({\r\n            editTask:taskObj,\r\n            formValue:formValue2\r\n        }) ; \r\n    }\r\n\r\n    handleSortChange =(value)=>{\r\n        // console.log('value',value )\r\n        this.setState({\r\n            newStatus:value\r\n    })}\r\n\r\n    createNewTask=()=>{\r\n            const {formError,formValue} = this.state ;\r\n        \r\n            return (\r\n                <div>\r\n                <Form formValue={formValue} \r\n                    model={this.taskModel}\r\n                    ref ={ ref =>(this.form = ref)}\r\n                    onCheck={formError=>this.handleTaskErrors(formError)} \r\n                    onChange={this.handleTaskCreation}> \r\n                <FormGroup data-testid=\"filter-input-description\">\r\n                    <ControlLabel>Description</ControlLabel>\r\n                    <FormControl name=\"description\" placeholder=\"Task Description\"  />\r\n                    <HelpBlock tooltip>Required</HelpBlock>\r\n                </FormGroup>\r\n    \r\n               <CustomField \r\n                   accepter={DatePicker}\r\n                   name={\"issued\"} \r\n                   label={\"Start Date\"}\r\n                   oneTap={true}\r\n                    // format={'YYYY-MM-DD'}\r\n                    error={formError.issued}\r\n    \r\n               />\r\n                {/* <HelpBlock tooltip>Required</HelpBlock> */}\r\n    \r\n                <CustomField \r\n                    accepter={DatePicker}\r\n                    name={\"due\"}\r\n                    label={\"Due Date\"}\r\n                    error={formError.due}\r\n                    oneTap={true}\r\n                    // format={'YYYY-MM-DD'}\r\n                />\r\n                <CustomField \r\n                    name=\"status\" \r\n                    label={\"Status\"}    \r\n                    accepter={RadioGroup}\r\n                    // error={}\r\n                    inline\r\n                >\r\n                    <Radio className={'not-started'} value={'not started'} >Not Started</Radio>\r\n                    <Radio className={'in-prog'} value={'in progress'} >In Progress</Radio>\r\n                    <Radio className={'complete'} value={'complete'} >Complete</Radio>\r\n                    </CustomField>\r\n                \r\n                <FormGroup>\r\n                    <Button data-testid=\"btn1\" onClick={this.handleTaskSubmit}>Submit</Button>\r\n                </FormGroup>\r\n            </Form>\r\n            </div>\r\n            )\r\n    }\r\n\r\n    listAllTasks =()=>{\r\n        if (this.props.nodeTasks){\r\n        // console.log('task props',this.props)\r\n            if(this.state.editTask.status !== undefined){\r\n                const task = this.state.editTask ;\r\n                // the edit button pressed\r\n                const projMembers = this.props.members.map((mem)=>{\r\n                    let taskMem = {\r\n                        label : mem.email,\r\n                        value : mem.email\r\n                    }\r\n                    return taskMem ;\r\n                })\r\n                const {formError,formValue} = this.state ;\r\n                const options = [{label:\"Not Started\",value:\"not started\"},{label:\"In Progress\",value:\"in progress\"},{label:\"Complete\",value:\"complete\"}]\r\n                return <><Panel bordered header={'Edit Task '}>\r\n                   <p> <Button onClick={()=>this.switchToEditTask({})}><Icon icon={'close'}/> Cancel</Button>\r\n                   \r\n                   </p>\r\n                    <small>\r\n                \r\n                        <b>Issued</b> : {task.issued} <br/>\r\n                       \r\n                        <Form formValue={formValue}\r\n                            model={this.taskModel}\r\n                            ref ={ ref =>(this.form = ref)}\r\n                            onCheck={formError=>this.handleTaskErrors(formError)} \r\n                            onChange={this.handleTaskCreation}> \r\n                            \r\n                        <FormGroup >\r\n                            <ControlLabel>Description</ControlLabel>\r\n                            <FormControl name=\"description\" placeholder=\"Task Description\"  />\r\n                            <HelpBlock tooltip>Required</HelpBlock>\r\n                        </FormGroup>\r\n\r\n\r\n                        <CustomField \r\n                            accepter={DatePicker}\r\n                            name={\"due\"}\r\n                            label={\"Due Date\"}\r\n                            error={formError.due}\r\n                            oneTap={true}\r\n                            format={'YYYY-MM-DD'}\r\n                        />\r\n                        \r\n                        <CustomField \r\n                                name=\"status\" \r\n                                label={\"Status\"}    \r\n                                accepter={SelectPicker}\r\n                                // error={}\r\n                                inline={'true'}\r\n                                data={options}\r\n                            ></CustomField>  \r\n\r\n                        <CustomField \r\n                                name=\"taskMembers\" \r\n                                label={\"Assign Task To Project Member\"}    \r\n                                accepter={CheckPicker}\r\n                                // error={}\r\n                                inline={'true'}\r\n                                data={projMembers}\r\n                            ></CustomField>  \r\n                            \r\n                        </Form >\r\n                                                    \r\n                        <br/>\r\n                    </small>\r\n\r\n                    <Button onClick={this.handleTaskSubmit}><Icon icon={'save'} spin={true}/>Save Changes</Button>\r\n                </Panel></>\r\n            }\r\n            else if (Array.isArray(this.props.nodeTasks) && this.props.nodeTasks.length>0 ){\r\n             return <PanelGroup accordion bordered>{\r\n                 this.props.nodeTasks.map((task)=>{\r\n                    return <Panel key={task._id} bordered header={`Description : ${task.description} `}>\r\n                    <small>\r\n                \r\n                        <b>Issued</b> : {task.issued} <br/>\r\n                        <b>Due-Date</b> : {task.due} <br/>\r\n                        <b>Status </b>: {task.status}\r\n                        <br/>\r\n                    </small>\r\n                    <Button onClick={()=>this.props.deleteTask(task._id)}> <Icon icon={'trash'}/>\r\n                    </Button>\r\n\r\n                    <Button onClick={()=>this.switchToEditTask(task)}><Icon icon={'pencil-square'}/>Edit Task</Button>\r\n                </Panel>})}\r\n            </PanelGroup>\r\n               \r\n            }\r\n            else{\r\n                return <small>\r\n                No Tasks Provided, Please add new tasks\r\n                </small>\r\n            }\r\n        }\r\n        else{\r\n            return <>\r\n            No Props Provided\r\n            </>\r\n        }\r\n    }\r\n\r\n    deleteAll = ()=>{\r\n        const tasks = this.props.nodeTasks ;\r\n        if (tasks){\r\n            if (tasks.length > 0 ){\r\n                const temp = tasks[0] ; \r\n                this.props.deleteNodeTasks(temp.nodeID) ; \r\n            }\r\n            else{\r\n                alert('no task to delete') ;\r\n            }\r\n        }\r\n        else{\r\n            //nothing\r\n        }\r\n    }\r\n\r\n    render(){\r\n        // console.log('Tasks pros',this.props)\r\n        return <div id=\"tidTask\" data-testid=\"tidTask\">\r\n            <div>\r\n                <Button onClick={this.toogleScreen}  appearance={'ghost'}>\r\n                {this.state.newTask?\"Close\":\"ADD TASK\"}\r\n                </Button> | <Button onClick={this.deleteAll}\r\n                 appearance={'subtle'}>DELETE ALL TASKS</Button>\r\n            </div>\r\n            <div>\r\n                {\r\n                    !this.state.newTask // display the list\r\n                    ?this.listAllTasks()\r\n                    //if not displat the form\r\n                    :this.createNewTask() \r\n                }\r\n               \r\n            </div>\r\n        \r\n        </div>\r\n    }\r\n} \r\n\r\nTask.propType = {\r\n    nodeTasks : PropTypes.array.isRequired, \r\n    members :PropTypes.array.isRequired,\r\n    sendTaskInfo:PropTypes.func.isRequired,\r\n    deleteTask :PropTypes.func.isRequired, \r\n    deleteNodeTasks:PropTypes.func.isRequired, \r\n    \r\n}\r\nexport default (Task) ;","import {React,Component} from \"react\";\r\n// import {Sigma,NodeShapes,EdgeShapes,DragNodes} from 'react-sigma' ; \r\nimport Graph from 'react-graph-vis' ;\r\n// import Dagre from 'react-sigma/lib/Dagre' ;\r\nimport  PropTypes  from \"prop-types\";\r\nimport { withRouter} from \"react-router-dom\";\r\nimport '../css/Graph.css' ;\r\nimport GraphManager from \"./Helpers/GraphManager\";\r\nimport { Popover,Avatar,Whisper, Button,Form,FormGroup,FormControl,ControlLabel, Modal, Checkbox, IconButton, Icon, Loader} from 'rsuite' ;\r\nimport axios from \"axios\";\r\nimport PopUpMessage from \"./Reusable/PopUpMessage\";\r\nimport Task from \"./Task\";\r\nimport {connect} from 'react-redux' ;\r\n\r\nclass GraphPath extends Component{\r\n  graphManager = null ;\r\n  initialGraph = {} ;\r\n  \r\n  constructor(props){\r\n    super(props) ;\r\n    this.state ={\r\n      currGraph:{} ,\r\n      showTask:false,\r\n      nodeName:'',\r\n      critical:false,\r\n      showNode:false, \r\n      loading:false,\r\n      showMsg:false,\r\n      answer:'',\r\n      source:'from',\r\n      target:'to',\r\n      taskList:[], \r\n      nodeTasks:[],\r\n      currNodeID:'',\r\n      currNodeName:''\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    const {graph} = this.props.project\r\n    var graphObj = JSON.parse(JSON.stringify(graph)) ;\r\n    // const graphObj = {...graph}\r\n    // console.log('created',graphObj)\r\n\r\n    if (graph !== undefined ){\r\n      this.initialGraph = graphObj ;\r\n      this.graphManager = new GraphManager(graph)\r\n      this.setState({\r\n        currGraph: this.graphManager.getGraph() \r\n      })  ;\r\n    }\r\n    else{\r\n        console.log('No Graph Object Mounted')\r\n    }\r\n    this.viewAllTasksForProject() ;\r\n    \r\n\r\n  }\r\n  componentWillUnmount(){\r\n    let semiUpdate = this.props.project ;\r\n    if (this.graphManager !== null){\r\n        semiUpdate.graph = this.graphManager.getGraph() ;\r\n        // this.setState({\r\n         delete this.graphManager  \r\n        // }) ;\r\n    }\r\n    //update parent\r\n    this.props.updateParent(semiUpdate) ;\r\n    console.log('update parent',semiUpdate)\r\n    \r\n  }\r\n\r\n  viewAllTasksForProject = (callback)=>{\r\n    if (this.props.project !== undefined){\r\n        \r\n      this.setState({\r\n        loading:true\r\n      });\r\n      const projectId = this.props.project._id ;\r\n      \r\n      axios.get(`${this.props.api}/task/getAllTasksByProject/${projectId}`)\r\n      .then((res)=>{\r\n          console.log('Tasklist',res) ;\r\n          const allTasks = res.data.data ;\r\n            if (allTasks !== undefined && Array.isArray(allTasks)){\r\n                this.setState({\r\n                    taskList:res.data.data ,\r\n                    loading:false ,\r\n                    showTask:false\r\n                },()=>{\r\n                  if (typeof callback === 'function'){\r\n                    callback() ;\r\n                  }\r\n                }) ;\r\n                \r\n            }\r\n            else{\r\n                this.setState({\r\n                    loading:false \r\n                }) ;\r\n            }\r\n      })\r\n      .catch((err)=>{\r\n            console.log('Error',err)\r\n            this.setState({\r\n                loading:false \r\n            }) ;\r\n\r\n        })\r\n\r\n        //update the task list if it was already showing\r\n    }\r\n    else{\r\n      this.setState({\r\n        loading:false , //if the project was loading before\r\n      })\r\n    }\r\n\r\n}\r\n\r\n  showNodeForm = ()=>{\r\n    this.setState({\r\n      showNode:!this.state.showNode\r\n    }) ;\r\n  }\r\n\r\n  filterByID=(id,array)=>{\r\n    return array.filter(value=>value.nodeID === id ) ;\r\n  }\r\n\r\n  showTaskModal=(nodeId)=>{\r\n    let filter = this.state.nodeTasks ;\r\n    \r\n    if (typeof nodeId === 'string' && nodeId.length>1 &&this.props.project !== undefined){\r\n      filter= this.filterByID(`${this.props.project._id}_${nodeId}`,this.state.taskList) ;\r\n      let selected = this.state.currGraph.nodes.find(node=>node.id === nodeId) ; \r\n      let nodeLabel = 'No Provided Name' ; \r\n      if (selected){\r\n        nodeLabel = selected.label ;\r\n      }\r\n      this.setState({\r\n        showTask:!this.state.showTask ,\r\n        nodeTasks:filter,\r\n        currNodeID:nodeId,\r\n        currNodeName:nodeLabel,\r\n      }) ;      \r\n    }\r\n    else{\r\n      \r\n      this.setState({\r\n        showTask:!this.state.showTask ,\r\n        currNodeId:'',\r\n        currNodeName:'',\r\n        nodeTask:[]\r\n      }) ;\r\n    }\r\n\r\n  }\r\n\r\n  handleChange =(value)=>{\r\n    this.setState({\r\n      nodeName:value\r\n    }) ;\r\n  }\r\n\r\n  handleCritical = (value)=>{\r\n    this.setState({\r\n      critical:!this.state.critical\r\n    }) ;\r\n  }\r\n  \r\n  updateGraph=(withsave)=>{\r\n    \r\n    this.setState({\r\n      currGraph: this.graphManager.getGraph() \r\n    },()=>{\r\n      if (withsave){\r\n        this.saveProjectGraph(this.props.project._id) ;\r\n      }\r\n    }) ;\r\n  }\r\n\r\n  addNewNode = ()=>{\r\n    const name = {\r\n      label:this.state.nodeName ,\r\n      critical:this.state.critical \r\n    }\r\n      \r\n    if (!name.label.toString().trim().length) {\r\n        // alert('Cannot Submit Empty Name')\r\n        PopUpMessage('Cannot Submit Empty Name','error')\r\n    }\r\n    else{\r\n        this.graphManager.setGraph(this.state.currGraph) ;\r\n        this.graphManager.addNode(name) ;\r\n        this.updateGraph();\r\n        this.cleanUpAfterNodeAddition()   ;\r\n      \r\n    }\r\n  }\r\n\r\n  createEdgeBetweenNode=(id) =>{\r\n    if (this.state.source === 'from'){\r\n      this.setState({\r\n        source:id\r\n      }) ;\r\n    }\r\n    else{\r\n      if (this.state.source === id){\r\n        // alert('Cannot make edge to self')\r\n        PopUpMessage('Cannot make edge to self','error')\r\n      }\r\n      else{  \r\n        // this.setState({\r\n        //   target:id\r\n        // }) ; \r\n        // this.graphManager.setGraph(this.state.currGraph) ;\r\n        let addedEdge = this.graphManager.addEdge(this.state.source,id) ;\r\n        // console.log('adding edge',addedEdge) ;\r\n\r\n        if (addedEdge === 1){\r\n          this.updateGraph() ;\r\n          // console.log('adding edge',this.graphManager.getGraph()) ;\r\n\r\n        }\r\n        else if (addedEdge === 0 ){\r\n          // alert('Edge Makes graph Cyclic')\r\n          PopUpMessage('Edge Makes graph Cyclic','Error')\r\n\r\n        }\r\n        else{\r\n          // alert('Edge Exists')\r\n          PopUpMessage('Edge Exists','warning')\r\n        }\r\n      }\r\n        //save the information\r\n        //send the information to make graph\r\n        //update Graph\r\n        //cleanup\r\n        this.cleanUpAfterEdgeAddition() ;\r\n    }\r\n\r\n  }\r\n\r\n  removeNode =(id)=>{\r\n    let result = this.graphManager.removeNode(id) ;\r\n    if (result){\r\n      this.updateGraph() ;\r\n      this.deleteAllNodeTask(`${this.props.project._id}_${id}`) ; \r\n\r\n    }\r\n    else{\r\n      //could not delete\r\n    }\r\n    return result ;\r\n  }\r\n\r\n  removeEdge = (id)=>{\r\n    let result = this.graphManager.removeEdgeWithEdgeId(id) ;\r\n    if (result){\r\n     this.updateGraph()\r\n    }\r\n    else{\r\n      console.log('Error when deleting edge')\r\n    }\r\n  }\r\n\r\n  cleanUpAfterEdgeAddition = ()=>{\r\n    this.setState({\r\n    source:'from',\r\n    target:'to'})\r\n  }\r\n\r\n  cleanUpAfterNodeAddition = ()=>{\r\n    this.setState({\r\n      nodeName:'',\r\n      critical:false\r\n    }) ;\r\n  }\r\n\r\n  /*\r\n  * Takes two graphs and compares them. \r\n  * the 1st param is old graph ~ current graph\r\n  * the 2nd param is new graph ~ one to be saved\r\n  * If they differ in size of nodes and edges return true\r\n  * If new graph is in wrong format return false\r\n  * If graphs are equal return false\r\n  */\r\n  validateGraphDifference=(oldG,newG)=>{\r\n    let diff = false ; \r\n    console.log('finding diff b/w',oldG,'and:',newG) ; \r\n\r\n    if ( newG === undefined ||newG.nodes === undefined || newG.edges === undefined){\r\n        // new Graph should not be undefined .. dont save \r\n        return diff ;\r\n    }\r\n    if (oldG === undefined){\r\n        //no olg graph? save \r\n        diff = true\r\n        return diff ;\r\n    }\r\n\r\n    if (oldG.nodes === undefined || oldG.edges === undefined || oldG === undefined){\r\n        //old graph was null, then we save the new one\r\n        diff =  true ; \r\n        return true ; \r\n    }\r\n    else{\r\n        // the lengths must be different\r\n        // let oldGSum = oldG.edges.length + oldG.nodes.length ;\r\n        // let newGSSum = newG.edges.length + newG.nodes.length ;\r\n        let oldGSum = JSON.stringify(oldG) ;\r\n        let newGSum = JSON.stringify(newG)\r\n        if (oldGSum !== newGSum){\r\n            diff = true ;\r\n            return diff ;\r\n        }\r\n        return diff ;\r\n    }\r\n  }\r\n\r\n  checkSavePermissions =()=>{\r\n    if (this.props.project !== undefined){\r\n      this.saveProjectGraph(this.props.project._id) ;\r\n    }\r\n  }\r\n\r\n  saveProjectGraph=(projectId)=>{\r\n\r\n      var saveGraph =this.validateGraphDifference(this.initialGraph,this.state.currGraph)\r\n      if ( saveGraph){ // if its not the same graph\r\n          // console.log('valid?:',saveGraph,'Saving to porjec',projNode.projectName,this.state.grapRep) ;\r\n          //set the loader while communicating with the server\r\n          this.setState({\r\n              loading:true\r\n          }) ;\r\n          // const minimalGraph = \r\n          const minimalNodes = this.state.currGraph.nodes.map((node)=>{\r\n              return {\r\n                  id:node.id,\r\n                  label:node.label,\r\n                  x:node.x,\r\n                  y:node.y,\r\n                  size:node.size,\r\n                  color:node.color,\r\n                  critical:node.critical \r\n              }\r\n          }) ;\r\n          const minimalEdges = this.state.currGraph.edges.map((edge)=>{\r\n              return {\r\n                  id: edge.id,\r\n                  from: edge.source === undefined ? edge.from: edge.source,\r\n                  to: edge.target === undefined ?edge.to: edge.target,\r\n                  label: edge.label,\r\n                  color: edge.color,\r\n                  width: edge.width,\r\n              }\r\n          })\r\n          const minimalGraph = {\r\n              nodes:minimalNodes,\r\n              edges:minimalEdges\r\n          }\r\n          const data = {} ; //{ ...this.props.project}  ;\r\n          data.graph = minimalGraph\r\n          data.projectID = projectId ;\r\n          data.email = this.props.loggedUser.email ; \r\n          console.log('b4',data)\r\n\r\n          axios.patch(`${this.props.api}/project/updateProjectGraph`,data,{\r\n            headers:{\r\n              authorization:this.props.loggedUser.token\r\n            }\r\n          })\r\n          .then((res)=>{\r\n              console.log('update graph response',res.data)\r\n              // if (res.data.data === undefined) {\r\n              //     // didn't save\r\n              //     alert(res.data.message) ; \r\n              // }\r\n              //communication happened successfully\r\n              this.setState({\r\n                  loading:false,\r\n                  answer:res.data.message,\r\n                  \r\n              }) ;\r\n              // this.viewProjectsFromAPI() ;\r\n              PopUpMessage(res.data.message,'info') ;\r\n              this.initialGraph = minimalGraph ;\r\n          })\r\n          .catch((err)=>{ \r\n            if (err.response){\r\n              console.log(err.response) ;\r\n              PopUpMessage(err.response.data.message,'error')\r\n            }\r\n            else{\r\n              console.log('Some error',err)\r\n            }\r\n              this.setState({\r\n                  loading:false\r\n              }) ;\r\n              \r\n          })\r\n      }\r\n      else{//no difference\r\n          // console.log('Node Project',this.props, this.graphManager) ;\r\n          PopUpMessage('No change to graph','warning')\r\n      }\r\n\r\n  }\r\n\r\n  saveNodeTask=(nodePreInfo)=>{\r\n    let nodeTask ={...nodePreInfo} ;\r\n    const {project} =this.props ;\r\n    nodeTask.projectID = project._id ;\r\n    nodeTask.nodeID = `${project._id}_${this.state.currNodeID}` ;\r\n    nodeTask.assigner = [{\r\n      email:`${this.props.loggedUser.email}`,\r\n      permissions:['owner']\r\n    }] ;\r\n    nodeTask.email = this.props.loggedUser.email ;\r\n    nodeTask.taskMembers = []\r\n\r\n    let label = this.state.currNodeName ;\r\n    if (label.length<1){\r\n      let nodeFound =  this.state.currGraph.nodes.find(node=>node.id === this.state.currNodeID) ;\r\n      nodeTask.title = nodeFound.label ;\r\n    }\r\n    else{\r\n      nodeTask.title = label ;\r\n    }\r\n\r\n    console.log('saving',nodeTask)\r\n    this.setState({\r\n      loading:true\r\n    }) ; \r\n\r\n    axios.post(`${this.props.api}/task/insertTask`,nodeTask,{\r\n      headers:{\r\n        authorization:this.props.loggedUser.token,\r\n        \r\n      }\r\n    })\r\n    .then((res)=>{\r\n      let taskRes = res.data ;\r\n      console.log('saved task',taskRes) ;\r\n\r\n      if (taskRes.data){\r\n        let nodeId = '' ;\r\n        if (taskRes.data.errors){\r\n          PopUpMessage(taskRes.message,'error')\r\n        }\r\n        else{\r\n         nodeId= nodeTask.nodeID.split('_')[1] ;\r\n          console.log('updated id',nodeId,taskRes.nodeCompletionStatus)\r\n          PopUpMessage(taskRes.message,'success') ;\r\n          this.changeNodeByStats(nodeId,taskRes.nodeCompletionStatus) ;\r\n        }\r\n        this.viewAllTasksForProject() ;\r\n      }\r\n      else{\r\n        PopUpMessage(taskRes.message,'info')\r\n        this.setState({\r\n          loading:false\r\n        }) ;\r\n      }\r\n    })\r\n    .catch((err)=>{\r\n      if (err.response){\r\n        console.log(err.response) ;\r\n        PopUpMessage(err.response.data.message,'warning')\r\n      }\r\n      else{\r\n        PopUpMessage('Something went wrong,please try again','info')\r\n        console.log('Some error',err)\r\n      }\r\n      this.setState({\r\n        loading:false\r\n      })\r\n    }) ;\r\n  }\r\n\r\n  clickNodeHandler = (event)=>{\r\n    // console.log(event) ; \r\n    const nodeAffected = event.data.node.id ;\r\n    // const nameOfNode = event.data.node.label ;\r\n\r\n    if (event.data.captor.altKey){\r\n      //delete node or edge\r\n      if (typeof nodeAffected === 'string'){\r\n        this.removeNode(nodeAffected) ;\r\n      }\r\n      // else if()\r\n    }\r\n    else if(event.data.captor.ctrlKey || event.data.captor.shiftKey){\r\n       //add edge between node\r\n      if (typeof nodeAffected === 'string'){\r\n        this.createEdgeBetweenNode(nodeAffected)\r\n      }\r\n      \r\n    }\r\n    else{\r\n      if (typeof nodeAffected === 'string'){\r\n        this.showTaskModal(nodeAffected)\r\n      }\r\n      this.cleanUpAfterEdgeAddition() ;\r\n    }\r\n  }\r\n\r\n  deleteOneTask=(taskId)=>{\r\n    let deleteAns = window.confirm('Are you sure you want to delete all tasks?') ;\r\n    if (deleteAns){\r\n    \r\n      axios.delete(`${this.props.api}/task/deleteTaskByID/${taskId}`,{\r\n        data: { \r\n          projectID:this.props.project._id ,\r\n          email:this.props.loggedUser.email\r\n        },\r\n        headers:{\r\n          authorization:this.props.loggedUser.token\r\n        }\r\n      })\r\n      .then((res)=>{\r\n        PopUpMessage(res.data.message,'info') ; \r\n        this.viewAllTasksForProject() ;\r\n\r\n      })\r\n      .catch((err)=>{\r\n        if (err.response){\r\n          console.log('Detailed err:',err.response)\r\n          PopUpMessage(err.response.data.message,'info')\r\n        }\r\n        console.log('some error',err) ;\r\n      })\r\n    }\r\n    else{\r\n      PopUpMessage('Task not deleted','info')\r\n    }\r\n  }\r\n\r\n  deleteAllNodeTask=(nodeID)=>{\r\n    let deleteAns = window.confirm('Are you sure you want to delete all tasks?') ;\r\n    if (deleteAns){\r\n    \r\n\r\n      axios.delete(`${this.props.api}/task/deleteTaskByNodeID/${nodeID}`,{\r\n        data: { \r\n          projectID:this.props.project._id ,\r\n          email:this.props.loggedUser.email\r\n        },\r\n        headers:{\r\n          authorization:this.props.loggedUser.token\r\n        }\r\n      })\r\n      .then((res)=>{\r\n        PopUpMessage(res.data.message,'info')\r\n        this.viewAllTasksForProject() ;\r\n      })\r\n      .catch((err)=>{\r\n        if (err.response){\r\n          console.log('Detailed err:',err.response)\r\n        }\r\n        console.log('some error',err) ;\r\n      })\r\n      \r\n    }\r\n    else{\r\n      PopUpMessage('All tasks not deleted','info')\r\n    }\r\n  }\r\n\r\n  updateNode=(node)=>{\r\n    node.taskID = node._id ;\r\n    console.log('updated ',node) ; \r\n\r\n    axios.patch(`${this.props.api}/task/updateEverythingTask`,node,{\r\n      headers:{\r\n        authorization:this.props.loggedUser.token\r\n      }\r\n    })\r\n    .then((res)=>{\r\n      console.log('update res',res); \r\n      let nodeId = node.nodeID.split('_')[1] ;\r\n      console.log('updated id',nodeId)\r\n      PopUpMessage(res.data.message,'info')\r\n\r\n      this.changeNodeByStats(nodeId,res.data.nodeCompletionStatus)\r\n    })\r\n    .catch((err)=>{\r\n      if(err.response ){\r\n        console.log('err msg',err.response) ;\r\n      }\r\n    })\r\n  }\r\n\r\n  newTaskModal=()=>{\r\n    return <Modal show={this.state.showTask} \r\n    keyboard={true}\r\n    onHide={this.showTaskModal}\r\n    overflow={true} backdrop={true} >\r\n      \r\n      <Modal.Header>\r\n        <Modal.Title>\r\n          Provided tasks - {\"Node: \"+this.state.currNodeName}\r\n\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n    <Modal.Body>\r\n      \r\n      <Task nodeTasks={this.state.nodeTasks} \r\n      members={this.props.project.groupMembers}\r\n      deleteNodeTasks={this.deleteAllNodeTask} \r\n      deleteTask={this.deleteOneTask} \r\n      updateNode={this.updateNode}\r\n      sendTaskInfo={this.saveNodeTask}/>\r\n    </Modal.Body>\r\n    </Modal>\r\n\r\n  }\r\n\r\n  changeNodeByStats(nodeId,stats){\r\n    let color = '#000' ; \r\n    if (stats >= 0.90){\r\n        //green\r\n        color = '#0d0'\r\n    }\r\n    else if (stats >= 0.50){\r\n      color = '#dd0' ;\r\n    }\r\n    else{\r\n      color = '#d00'\r\n    }\r\n\r\n    let res = this.graphManager.changeColor(nodeId,color) ; \r\n    console.log('change color',res) ;\r\n    if (res){\r\n      this.updateGraph(true) ;\r\n    }\r\n    else{\r\n      PopUpMessage('Could not change node color','info') ;\r\n    }\r\n\r\n  }\r\n\r\n  render(){\r\n    console.log(' graph',this.state.currGraph) \r\n          \r\n          //start rendering\r\n          if (this.graphManager !== null){\r\n            const graph = this.state.currGraph;\r\n            console.log('curr',this.graphManager)\r\n            const speaker = (\r\n            <Popover visible={this.state.showNode} title=\"ADD NODE TO GRAPH\">\r\n        \r\n             <Form onSubmit={this.addNewNode} data-testid=\"form\">\r\n                <FormGroup>\r\n                    <ControlLabel> Node Name</ControlLabel>\r\n                    <FormControl name=\"node\" type=\"text\" value={this.state.nodeName} onChange={this.handleChange} />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Checkbox checked={this.state.critical} onChange={this.handleCritical}>\r\n                    Critical Node ?\r\n                    </Checkbox>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <FormControl type=\"submit\"/>\r\n                 </FormGroup>\r\n            </Form>\r\n        </Popover>) ; \r\n         const options = {\r\n          layout: {\r\n            randomSeed: undefined,\r\n            improvedLayout:true,\r\n            clusterThreshold: 150,\r\n            // hierarchical: {\r\n            //   enabled:false,\r\n            //   levelSeparation: 150,\r\n            //   nodeSpacing: 100,\r\n            //   treeSpacing: 200,\r\n            //   blockShifting: true,\r\n            //   edgeMinimization: true,\r\n            //   parentCentralization: true,\r\n            //   direction: 'UD',        // UD, DU, LR, RL\r\n            //   sortMethod: 'hubsize',  // hubsize, directed\r\n            //   shakeTowards: 'leaves'  // roots, leaves\r\n            // }\r\n          },\r\n          nodes:{\r\n            physics:false,\r\n            // size:25,\r\n            shape:'box',\r\n            font:{\r\n              color: '#343434',\r\n              size: 30, // px\r\n              face: 'arial',\r\n              background: 'none',\r\n              strokeWidth: 0, // px\r\n              strokeColor: '#ffffff',\r\n              align: 'center'\r\n            }\r\n          },\r\n          edges: {\r\n            color: \"#ff0000\" , \r\n            physics:false ,\r\n            font:'false',\r\n            // {\r\n            //   size:20,\r\n            //   face:'calibri',\r\n            //   align:'middle',\r\n            // },\r\n            arrowStrikethrough:false,\r\n            arrows:{\r\n              to:{\r\n                enabled:true,\r\n                imageHeight: 30,\r\n                type:'arrow'\r\n              }\r\n            },\r\n          },\r\n          // physics:{\r\n            // enabled:true ,\r\n            // forceAtlas2Based: {\r\n            //   theta: 1,\r\n            //   gravitationalConstant: -50,\r\n            //   centralGravity: 0.01,\r\n            //   springConstant: 0.08,\r\n            //   springLength: 100,\r\n            //   damping: 0.4,\r\n            //   avoidOverlap: 0\r\n            // }\r\n          // }\r\n        };\r\n        \r\n        const events = {} ;\r\n        events.select =  function(event) {\r\n            var { nodes, edges } = event;\r\n            console.log('sel',event)\r\n          }  ;\r\n        events.externalDragUpdate = this.graphManager.updatePosition ;\r\n        events.dragEnd = function (event){\r\n          console.log('drag',event)\r\n\r\n          const nodesAffected = event.nodes ;\r\n          if (nodesAffected.length > 0 ){\r\n            let curr = nodesAffected.shift() ;\r\n            let {x,y} = event.pointer.canvas ;\r\n\r\n            let update = events.externalDragUpdate(curr,x,y) ;\r\n            console.log('update',update) ;\r\n          }\r\n        }\r\n\r\n        events.externalRemoveNode = this.removeNode ;\r\n        events.externalRemoveEdge = this.removeEdge ;\r\n        events.externalCreateEdge = this.createEdgeBetweenNode\r\n        events.viewTaskInfo = this.showTaskModal ;\r\n        events.click = function(event){\r\n            console.log('clicked',event,'ctrl',event.event.srcEvent.ctrlKey) ;\r\n            const nodesAffected = event.nodes ;\r\n            const edgesAffected = event.edges ;\r\n            if (event.event.srcEvent.altKey){\r\n              //delete node or edge\r\n              if (nodesAffected.length>0){\r\n                let curr = nodesAffected.shift() ;\r\n\r\n                events.externalRemoveNode(curr) ;\r\n\r\n              }\r\n              else if (edgesAffected.length> 0) {\r\n                let currE = edgesAffected.shift()\r\n                events.externalRemoveEdge(currE)\r\n              }\r\n            }\r\n            else if (event.event.srcEvent.ctrlKey || event.event.srcEvent.shiftKey){\r\n              //add edge between node\r\n              if (nodesAffected.length>0){\r\n                let curr = nodesAffected.shift() ;\r\n                events.externalCreateEdge(curr) ; \r\n              }\r\n\r\n            }\r\n            else{\r\n              //view task information\r\n              if (nodesAffected.length>0){\r\n                let node = nodesAffected[0];\r\n                events.viewTaskInfo(node) ;\r\n\r\n              }\r\n            }\r\n            \r\n        } \r\n      \r\n            return (\r\n              <div >\r\n                {\r\n                  this.state.loading && (<Loader backdrop speed={'fast'} size={'lg'}/>)\r\n                }\r\n                \r\n              <div id=\"graph-info\" >\r\n                <h3>{this.props.project.projectName}</h3>\r\n\r\n                <div id=\"graph-nav\">\r\n                <Whisper speaker={speaker} placement={'leftStart'} trigger={'active'}>\r\n                <Button >Add Node</Button>\r\n                </Whisper> &nbsp;\r\n                <IconButton onClick={()=>this.checkSavePermissions()} title={\"Save Graph\"} icon={<Icon icon={'save'}/>}/>\r\n                <IconButton icon={<Icon icon={'charts-line'}/>}>Project Graph Critical Path</IconButton>\r\n                \r\n                  </div>\r\n              </div>\r\n\r\n                <div id=\"graphbox\">\r\n                    {/* <div>\r\n                 {this.state.currNodeID.length > 1 ?\r\n                 \r\n                        \r\n                        <Avatar onClick={this.showTaskModal} className={'nodeView'} circle size={'lg'}>{\r\n                        this.state.currNodeName===''?'click a node':this.state.currNodeName}</Avatar>\r\n                 : <small>Click a node to add a task. To add node press, Add Node on top</small>}\r\n                      \r\n\r\n                     </div> */}\r\n\r\n                      {// return the modal\r\n                      this.newTaskModal()}\r\n\r\n                     <Graph key={JSON.stringify(graph)}\r\n                  graph={this.state.currGraph}\r\n                  options={options}\r\n                  events={events}\r\n                  getNetwork={network => {\r\n                    //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n                    // console.log('net',network)\r\n                    network.stabilize(2000);\r\n                  }}\r\n              />\r\n\r\n               {/* <Sigma renderer=\"canvas\"  id=\"SigmaParent\" key={JSON.stringify(graph)}\r\n                  graph={graph}\r\n                  style={{\r\n                    // position:\"relative\", \r\n                    height:\"92%\", width:\"100%\" ,  \r\n                  }}\r\n                  settings={{\r\n                    clone: false, // do not clone the nodes\r\n                    immutable:false,// cannot updated id of node\r\n                    // labelSizeRatio:1,\r\n                    labelThreshold:0.5,\r\n                    scalingMode:\"inside\",\r\n                    sideMargin:100,\r\n                    minNodeSize:3,\r\n                    maxNodeSize:10,\r\n                    minEdgeSize:0.1,\r\n                    font:\"calibri\",\r\n                    defaultLabelSize:30,\r\n                    defaultLabelColor:\"#000\",\r\n                    labelSizeRatio:4,\r\n                    defaultEdgeHoverColor:'#000',\r\n                    maxEdgeSize:4,\r\n                    drawNodes:true, //draw node ?\r\n                    drawLabels:true, //node label\r\n                    drawEdges: true, //draw edge?\r\n                    drawEdgeLabels:true,\r\n                    minArrowSize:10,\r\n                    enableEdgeHovering:true,\r\n                    edgeHoverPrecision:100,\r\n                    // doubleClickEnabled:false,\r\n                    // zoomMax:1,\r\n                    autoResize:true ,\r\n                    autoRescale:false\r\n                  }}    \r\n                onClickNode={this.clickNodeHandler}\r\n                clickStage={()=>console.log('stage')}\r\n                  // options={options}\r\n                  // events={events}\r\n              >\r\n                <EdgeShapes default=\"arrow\"/>\r\n                <NodeShapes default=\"def\"/>\r\n                <DragNodes />\r\n                {/* <Dagre directed={false}/> \r\n                {/* <RandomizeNodePositions seed={20} /> \r\n                {/* <RelativeSize size={30} /> \r\n                \r\n              </Sigma>\r\n            */}\r\n\r\n              </div>\r\n              </div>\r\n  \r\n            )\r\n          }\r\n          else{\r\n            return (<div>\r\n              Something Wrong\r\n            </div>)\r\n          }\r\n        \r\n  }\r\n}\r\n\r\nGraphPath.defaultProps = {\r\n  api:'http://localhost:9001'\r\n}\r\n\r\nGraphPath.propTypes = {\r\n  // task:PropTypes.array,\r\n  project:PropTypes.object.isRequired,\r\n  api:PropTypes.string , \r\n  updateParent: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n      loggedUser:state.loggedUser\r\n  } ;\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(withRouter(GraphPath)) ;\r\n\r\n  /* \r\n          */\r\n        ","import React from 'react' ;\r\nimport '../css/ProjectInformation.css'\r\nimport {\r\n    Button,\r\n    Checkbox, CheckboxGroup, CheckPicker,\r\n    Divider,\r\n    Drawer,\r\n    FlexboxGrid, Form,\r\n    Icon,\r\n    Modal,\r\n    Notification\r\n} from \"rsuite\";\r\nimport axios from \"axios\";\r\nimport PopUpMessage from \"./Reusable/PopUpMessage\";\r\nimport CustomField from \"./Reusable/CustomField\";\r\n\r\n// function Paragraph() {\r\n//     return null;\r\n// }\r\n\r\nclass ProjectInformation extends React.Component{\r\n    /**\r\n     * Update project information (name, due, start)\r\n     * Show(Members, )\r\n     * Add or Invite Members\r\n     * Remove Members\r\n     * Change roles\r\n     *\r\n     * Permissions\r\n     * - update project owner\r\n     * - update graph\r\n     * - update all project\r\n     * - delete project\r\n     * - delete task\r\n     * - remove members\r\n     * - add members\r\n     *\r\n     * @returns {JSX.Element}\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            show:false,\r\n            showModal:false,\r\n            disabled: true,\r\n            projName:'',\r\n            projectOwner:'',\r\n            startD: '',\r\n            dueD:'',\r\n            projDescription:'',\r\n            api:'http://localhost:9001',\r\n            answer:'',\r\n            editMember:false,\r\n            MemberEditEmail:'',\r\n            value:[],\r\n            memberName:\"\",\r\n            allMembersFromDb:undefined,\r\n            projectMembers:[]\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAllUsers() ;\r\n        //this.getTodoList();\r\n    }\r\n\r\n    handleViewMembers = () =>{\r\n        this.setState({\r\n            show: !this.state.show\r\n        })\r\n    }\r\n\r\n    showAddMembers = ()=>{\r\n        this.setState({\r\n            showModal: true\r\n        })\r\n    }\r\n\r\n    handleAddMembers = (e) =>{\r\n        e.preventDefault();\r\n        console.log(\"submitted\",this.state)\r\n        if(this.state.memberName.length > 5) {\r\n            const data = {\r\n                email: this.props.user.email,\r\n                projectID: this.props.project._id,\r\n                groupMembers: [{\r\n                    email: this.state.memberName,\r\n                    role: \"Developer\",\r\n                    permissions: this.state.value\r\n                }]\r\n            }\r\n            // console.log(\"add m\",this.state)\r\n            this.setState({\r\n                showModal: false,\r\n                value: []\r\n            })\r\n            this.addMember(data)\r\n        }\r\n        else if(this.state.projectMembers.length > 0){\r\n            let data ={\r\n                email: this.props.user.email,\r\n                projectID: this.props.project._id,\r\n                groupMembers:[]\r\n            }\r\n            this.state.projectMembers.map((item,index)=>\r\n                data.groupMembers[index] = {\r\n                    email: item,\r\n                    role: \"Developer\",\r\n                    permissions: this.state.value\r\n                }\r\n            )\r\n            console.log(\"p members\",data)\r\n            this.setState({\r\n                showModal: false,\r\n                value: []\r\n            })\r\n            this.addMember(data)\r\n            // PopUpMessage(\"Adding\", \"warning\")\r\n        }\r\n        else{\r\n            PopUpMessage(\"Provide Email\", \"warning\")\r\n        }\r\n\r\n    }\r\n\r\n    addMember = (data)=>{\r\n        console.log(\"submitted sent\",data)\r\n        try{\r\n            axios.post(`${this.state.api}/project/addToProjectGroupMembers/`,data,{\r\n                headers:{\r\n                    authorization:this.props.user.token\r\n                }\r\n            })\r\n                .then((res)=>{\r\n                    console.log('add member response',res.data)\r\n\r\n                    const resp = res.data;\r\n\r\n                    this.setState({\r\n                        answer: resp.message\r\n                    },()=>{\r\n                        if (this.state.answer !== undefined) {\r\n                            PopUpMessage(\"Member Added\", \"success\")\r\n\r\n                        } else {\r\n                            alert(`Something went wrong please update again `)\r\n                        }\r\n                    })\r\n                },(response)=>{\r\n                    console.log('rejected', response);\r\n                    alert('Server Error, Please try again later');\r\n                })\r\n        }catch (error){\r\n            if(error.response.data){\r\n                console.log(error.response.data)\r\n            }\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    addMemberModal=()=>{\r\n        this.setState({\r\n            showModal: true,\r\n            editMember: false\r\n        })\r\n    }\r\n\r\n    enableEdit = () => {\r\n        this.setState({\r\n            disabled: !this.state.disabled\r\n        })\r\n    }\r\n\r\n    onSubmit = (e)=>{\r\n        e.preventDefault();\r\n        console.log(\"submitted\",this.state)\r\n\r\n        const data = Object.assign( this.props.project,{\r\n            projectID: this.props.project._id,\r\n            owner: this.props.project.projectOwner,\r\n            email: this.props.user.email\r\n\r\n        })\r\n\r\n        // console.log(\"props\",this.props.project.projectToDisplay)\r\n        // if(this.state.empty === true){\r\n        //\r\n        // }else{\r\n            if(this.state.projName === ''){\r\n                // data.projectName = this.props.project.projectName; //no change\r\n            }else{\r\n                data.projectName = this.state.projName; //change\r\n            }\r\n\r\n            if(this.state.projDescription === ''){\r\n                // data.projectName = this.props.project.projectName; //no change\r\n            }else{\r\n                data.projectDescription = this.state.projDescription; //change\r\n            }\r\n\r\n            if(this.state.startD === ''){\r\n                // data.startDate = this.props.project.startDate;\r\n            }else{\r\n                data.startDate = this.state.startD;\r\n            }\r\n\r\n            if(this.state.dueD === ''){\r\n                // data.dueDate = this.props.project.dueDate;\r\n            }else{\r\n                data.dueDate = this.state.dueD;\r\n            }\r\n            this.sendData(data);\r\n            console.log(\"data send\",data)\r\n            this.setState({\r\n                disable: true\r\n            })\r\n\r\n        // }\r\n\r\n    }\r\n\r\n    sendData = (data)=>{\r\n        console.log(\"token\",this.props.user)\r\n        try{\r\n            axios.put(`${this.state.api}/project/updateEverythingProject/`,data,{\r\n                headers:{\r\n                    authorization:this.props.user.token\r\n                }\r\n            })\r\n            .then((response)=>{\r\n                console.log('update project response',response.data)\r\n                    // if(response.status === 400){\r\n                    //     throw Error(response.statusText);\r\n                    // }\r\n\r\n                    const res = response.data;\r\n\r\n                    this.setState({\r\n                        answer: res.message\r\n                    },()=>{\r\n                        if (this.state.answer !== undefined) {\r\n                            PopUpMessage(\"Project Updated\", \"success\")\r\n\r\n                        } else {\r\n                            alert(`Something went wrong please update again `)\r\n                        }\r\n                    })\r\n                },(response)=>{\r\n                    console.log('rejected', response);\r\n                    alert('Server Error, Please try again later');\r\n                })\r\n        }catch (error){\r\n            if(error.response.data){\r\n                console.log(error.response.data)\r\n            }\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    removeMember = (email)=>{\r\n        console.log(\"email\",email)\r\n        const data ={\r\n            projectID: this.props.project._id,\r\n            email: email\r\n        }\r\n        try{\r\n            axios.patch(`${this.state.api}/project/removeProjectMember/`,data,{\r\n                headers:{\r\n                    authorization:this.props.user.token\r\n                }\r\n            })\r\n                .then((response)=>{\r\n                    if(response.status === 400){\r\n                        throw Error(response.statusText);\r\n                    }\r\n\r\n                    const res = response.data;\r\n\r\n                    this.setState({\r\n                        answer:res.message\r\n                    },()=>{\r\n                        if(this.state.answer !== undefined){\r\n                            // this.setState({\r\n                            //     popUpText: email+\" has been removed from the project.\"\r\n                            // });\r\n                            // this.showPopUP()\r\n                            PopUpMessage(\"Member Removed\", \"success\")\r\n                        }else{\r\n                            alert(\"something went wrong please remove again\")\r\n                        }\r\n                    })\r\n                },(response)=>{\r\n                    console.log('rejected',response);\r\n                    alert('Server Error, Please try again later')\r\n                })\r\n                .then(()=>{\r\n                    //instant update\r\n                })\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    handleEditRole=(email)=>{\r\n        let i = 0;\r\n        this.props.project.groupMembers.map((value,index)=>{\r\n            value.email === email ?\r\n                i = index\r\n            :\r\n            <></>\r\n                // this.setState({\r\n                //     value:this.props.project.groupMembers[index].permissions\r\n                // })\r\n                // :\r\n                // <></>\r\n        })\r\n        console.log(\"index\",i)\r\n        this.setState({\r\n            editMember: true,\r\n            showModal: true,\r\n            MemberEditEmail:email,\r\n            value:this.props.project.groupMembers[i].permissions\r\n        })\r\n\r\n\r\n\r\n        console.log(\"edit role\",email)\r\n    }\r\n\r\n    handleCloseEdit=()=>{\r\n        this.setState({\r\n            editMember: false,\r\n            showModal: false,\r\n            value:[]\r\n        })\r\n    }\r\n\r\n    updateRole=()=>{\r\n        this.props.project.groupMembers.map((value,index)=>{\r\n            value.email === this.state.MemberEditEmail ?\r\n                this.props.project.groupMembers[index].permissions =  this.state.value //[...this.props.project.groupMembers[index].permissions,...this.state.value]\r\n\r\n                // this.props.project.groupMembers[index].permissions.map((value))\r\n                :\r\n                <></>\r\n        })\r\n\r\n        this.setState({\r\n            editMember: false,\r\n            showModal: false,\r\n            value:[]\r\n        })\r\n\r\n        const data = Object.assign( this.props.project,{\r\n            projectID: this.props.project._id,\r\n            owner: this.props.project.projectOwner,\r\n            email: this.props.user.email\r\n\r\n        })\r\n\r\n        data.groupMembers = this.props.project.groupMembers;\r\n\r\n        console.log(\"data-gr\",data)\r\n\r\n        this.sendData(data)\r\n\r\n    }\r\n\r\n    change = (e)=>{\r\n        e.preventDefault();\r\n        const {name,value} = e.target;\r\n        this.setState({ [name]: value })\r\n\r\n    }\r\n\r\n    getAllUsers=()=>{\r\n        try{\r\n            axios.get(`${this.state.api}/user/listOfAllUsers/`,{\r\n                headers:{\r\n                    authorization:this.props.user.token\r\n                }\r\n            })\r\n                .then((response)=>{\r\n                    if(response.status === 400){\r\n                        throw Error(response.statusText);\r\n                    }\r\n\r\n                    const res = response.data.data;\r\n                    console.log(\"all members\",res)\r\n                    this.setState({\r\n                        allMembersFromDb: res\r\n                    })\r\n\r\n                    // this.setState({\r\n                    //     answer:res.message\r\n                    // },()=>{\r\n                    //     if(this.state.answer !== undefined){\r\n                    //\r\n                    //     }else{\r\n                    //         alert(\"something went wrong please remove again\")\r\n                    //     }\r\n                    // })\r\n                },(response)=>{\r\n                    console.log('rejected',response);\r\n                    alert('Server Error, Please try again later')\r\n                })\r\n                .then(()=>{\r\n                    //instant update\r\n                })\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    saveMember=(list)=>{\r\n        // e.preventDefault();\r\n        // console.log(\"Form\",list)\r\n        this.setState({\r\n            projectMembers:list\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const project = this.props.project;\r\n        const {formValue} = this.state;\r\n         {console.log(\"proj\",project)}\r\n        return(\r\n            <div data-testid=\"main-div-id\" id=\"main-div\">\r\n                <div id=\"project-name\"><h3>{project.projectName}</h3></div>\r\n                <div id=\"project-information\">\r\n\r\n                        <form data-testid=\"form-test-id\" className=\"profileForm\" onSubmit={this.onSubmit} >\r\n                            <label>Project Name</label>\r\n                            <input defaultValue={project.projectName}\r\n                                   disabled = {!!(this.state.disabled)}\r\n                                   onChange={this.change}\r\n                                   type='text'\r\n                                   name = \"projName\"\r\n                                   required\r\n                            />\r\n\r\n\r\n                            <label>Project Owner</label>\r\n                            <input value={project.projectOwner}\r\n                                   disabled\r\n                                   type='text'/>\r\n\r\n\r\n                            <label>Project Description</label>\r\n                            <input defaultValue={project.projectDescription}\r\n                                   disabled = {!!(this.state.disabled)}\r\n                                   onChange={this.change}\r\n                                   name=\"projDescription\"\r\n                                   type='text'\r\n                                   required\r\n                            />\r\n\r\n\r\n                            <label>Start Date</label>\r\n                            <input type=\"date\"\r\n                                   name=\"startD\"\r\n                                   defaultValue={project.startDate}\r\n                                   onChange={this.change}\r\n                                   disabled = {!!(this.state.disabled)}\r\n                                   required\r\n                            />\r\n\r\n                            <label>Due Date</label>\r\n                            <input defaultValue={project.dueDate}\r\n                                   type='date'\r\n                                   name=\"dueD\"\r\n                                   onChange={this.change}\r\n                                   disabled = {!!(this.state.disabled)}\r\n                                   required\r\n                            />\r\n                            {\r\n                                project.permissions.includes(\"update all project\") === true || project.permissions.includes(\"owner\") ?\r\n                                    this.state.disabled ? <Button id=\"btn-form\" disabled = {(!this.state.disabled)}\r\n                                                                  onClick={this.enableEdit}>Edit</Button>\r\n                                        :\r\n\r\n                                        // <Button id=\"btn-form\" disabled = {(this.state.disabled) ? \"disabled\" : \"\"}\r\n                                        //         onClick={this.enableEdit}>Update</Button>\r\n                                        <input className=\"rs-btn rs-btn-default\" id=\"btn-form\" type=\"submit\" value=\"Update\"/>\r\n                                    :\r\n                                    <Button id=\"btn-form\" disabled = {true}\r\n                                            >Edit</Button>\r\n                            }\r\n                            {\r\n                                project.permissions.includes(\"update all project\") === true || project.permissions.includes(\"owner\") ?\r\n                                    <Button data-testid=\"cancel-id\" id=\"btn-form\" disabled={!!(this.state.disabled)}\r\n                                            onClick={this.enableEdit}>Cancel</Button>\r\n                                    :\r\n                                    <Button data-testid=\"cancel-id\" id=\"btn-form\" disabled={true}\r\n                                            >Cancel</Button>\r\n                            }\r\n\r\n                        </form>\r\n\r\n\r\n                </div>\r\n                <div id=\"second-div\">\r\n                    {/*To View Members*/}\r\n                    <Drawer\r\n                        size={\"xs\"}\r\n                        placement={\"left\"}\r\n                        show={this.state.show}\r\n                        onHide={this.handleViewMembers}\r\n                    >\r\n                        <Drawer.Header>\r\n                            <Drawer.Title>Project Members</Drawer.Title>\r\n                            <Divider/>\r\n                        </Drawer.Header>\r\n                        <Drawer.Body>\r\n                            {\r\n                                project.groupMembers.map((value,index)=>{\r\n                                return (\r\n                                    <div key={index} id=\"memberDiv\">\r\n                                        { value.email !== project.projectOwner ?\r\n                                            <>\r\n                                                <div>\r\n                                                    <p id=\"email-p\">Email: {value.email}</p>\r\n                                                    {\r\n                                                        project.permissions.includes(\"update all project\") === true || project.permissions.includes(\"owner\") ?\r\n                                                            <Icon id=\"change-icon\" icon=\"pencil-square\" onClick={()=>this.handleEditRole(value.email)} />\r\n                                                            :\r\n                                                            <></>\r\n                                                    }\r\n\r\n                                                    {\r\n                                                        project.permissions.includes(\"remove members\") === true || project.permissions.includes(\"owner\") ?\r\n                                                            <Icon id=\"remove-icon\" icon=\"user-times\" onClick={()=>this.removeMember(value.email)}/>\r\n                                                            :\r\n                                                            <></>\r\n                                                    }\r\n\r\n                                                </div>\r\n                                                <Divider/>\r\n                                            </> : <>\r\n                                                Owner: {value.email}\r\n                                                <Divider/>\r\n                                            </>\r\n                                        }\r\n\r\n\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                            {\r\n                                project.permissions.includes(\"add members\") === true || project.permissions.includes(\"owner\") ?\r\n                                    <Icon onClick={this.addMemberModal} id=\"add-icon\" icon={\"user-plus\"}/>\r\n                                    :\r\n                                    <></>\r\n                            }\r\n\r\n                        </Drawer.Body>\r\n                    </Drawer>\r\n\r\n                    {/*To Add Members*/}\r\n                    <Modal data-testid=\"modal-test-id\" backdrop={\"static\"} show={this.state.showModal} onHide={this.handleCloseEdit}>\r\n                        <Modal.Header>\r\n                            {\r\n                                this.state.editMember === false ?\r\n                                    <>\r\n                                        <Modal.Title style={{textAlign:\"center\"}}>Add/Invite Members</Modal.Title>\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <Modal.Title style={{textAlign:\"center\"}}>Change Permissions</Modal.Title>\r\n                                    </>\r\n                            }\r\n\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n\r\n\r\n                                <FlexboxGrid id=\"permission-div\" justify=\"space-around\">\r\n\r\n                                    <form onSubmit={this.handleAddMembers}>\r\n                                            {\r\n                                                this.state.editMember === false ?\r\n                                                    <>\r\n\r\n                                                    {/*<label>Email</label>*/}\r\n                                                    <input id=\"email-input\" onChange={this.change} type=\"email\" name=\"memberName\" placeholder=\"Member Email\"\r\n                                                    />\r\n                                                        <br/>\r\n\r\n\r\n                                                        {\r\n\r\n                                                            this.state.allMembersFromDb !== undefined ?\r\n\r\n                                                                <CheckPicker\r\n                                                                    sticky\r\n                                                                    name=\"groupMembers\"\r\n                                                                    data={this.state.allMembersFromDb}\r\n                                                                    appearance=\"default\"\r\n                                                                    placeholder=\"Search Members\"\r\n                                                                    style={{ width: 224 }}\r\n                                                                    onSelect={value => this.saveMember(value)}\r\n                                                                />\r\n                                                                :<></>\r\n\r\n                                                        }\r\n\r\n                                                    </>\r\n                                                :\r\n                                                    <>\r\n\r\n                                                        {/*<h6>email owner</h6>*/}\r\n\r\n                                                    </>\r\n                                            }\r\n\r\n\r\n                                        <FlexboxGrid.Item id=\"can-do-div\" colspan={24} md={6} ><h6 style={{textAlign:\"center\"}}>Permissions</h6>\r\n                                                <Divider/>\r\n                                                <div id=\"check-list\">\r\n                                                    <CheckboxGroup\r\n                                                        name=\"checkboxList\"\r\n                                                        value={this.state.value}\r\n                                                        onChange={value => {\r\n                                                            console.log(\"permission\",value)\r\n                                                            this.setState({\r\n                                                                value\r\n                                                            })\r\n                                                        }}\r\n                                                    >\r\n                                                        <Checkbox value=\"update project owner\" >Change Project Owner</Checkbox>\r\n                                                        <Checkbox value=\"update graph\" >Update Graph</Checkbox>\r\n                                                        <Checkbox value=\"update all project\" >Update Project Information</Checkbox>\r\n                                                        <Checkbox value=\"delete project\">Delete Project</Checkbox>\r\n                                                        <Checkbox value=\"delete task\">Delete Task</Checkbox>\r\n                                                        <Checkbox value=\"remove members\">Remove Members</Checkbox>\r\n                                                        <Checkbox value=\"add members\">Add Members</Checkbox>\r\n                                                        <Checkbox value=\"view statistics\">View Statistics</Checkbox>\r\n                                                    </CheckboxGroup>\r\n\r\n                                                </div>\r\n                                            </FlexboxGrid.Item>\r\n                                        {\r\n                                            project.permissions.includes(\"add members\") === true || project.permissions.includes(\"owner\") ?\r\n                                                this.state.editMember === false ?\r\n                                                <input type=\"submit\" className=\"rs-btn rs-btn-default\" id=\"add-member-btn\" value=\"Add Member\"/>\r\n                                                    : <></>\r\n                                                :\r\n                                                <></>\r\n\r\n                                        }\r\n\r\n                                    </form>\r\n\r\n\r\n                                </FlexboxGrid>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            {\r\n                                this.state.editMember === false ?\r\n                                    <>\r\n\r\n\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <Button variant=\"secondary\" onClick={this.updateRole}>\r\n                                            Update\r\n                                        </Button>\r\n                                    </>\r\n                            }\r\n\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n\r\n                </div>\r\n                <div id=\"btn-form-div\">\r\n                    <Button data-testid=\"view-btn\" id=\"btn-info\" onClick={this.handleViewMembers}>View Members</Button>\r\n                    {\r\n                        project.permissions.includes(\"add members\") === true || project.permissions.includes(\"owner\") ?\r\n                            <Button data-testid=\"add-btn\" id=\"btn-info\" onClick={this.showAddMembers}>Add Members</Button>\r\n                            :\r\n                            <Button data-testid=\"add-btn\" id=\"btn-info\" disabled={true}>Add Members</Button>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ProjectInformation;","import {React,Component} from 'react' ;\r\nimport PropTypes from 'prop-types';\r\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\r\nimport GraphPath from './Graph';\r\nimport { Icon, Nav, Sidebar, Sidenav } from 'rsuite';\r\nimport '../css/Common.css'\r\nimport ProjectInformation from \"./ProjectInformation\";\r\n\r\n/*\r\n*   Project provides a view to the graph of the project\r\n*   Project is also able to \r\n*       1. Edit the name of the project. \r\n*       2. Attach Members to the project. \r\n*       3. Show Graph for each project\r\n*   The Project is received as a prop. It is the able to share the information with other components \r\n*\r\n*\r\n*\r\n*\r\n*\r\n*\r\n\r\n\r\n*/\r\n\r\n\r\n\r\nclass Project extends Component {\r\n    constructor(props){\r\n        super(props) ; \r\n        this.state = {\r\n            taskList : []\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        // fix Warning: Can't perform a React state update on an unmounted component\r\n        this.setState = (state,callback)=>{\r\n            return;\r\n        };\r\n    }\r\n\r\n    render(){\r\n        const {match} = this.props ;\r\n        // console.log('PRoj',this.props)\r\n        const {project} = this.props\r\n        if (project === undefined || project.projectName === undefined){\r\n            return (<div>\r\n                Please Select Project\r\n            </div>)\r\n        }\r\n        else{\r\n            return (\r\n                <div data-testid=\"tidProjectView\" id=\"projectView\">\r\n                    {/* EDIT|VIEW GRAPH|ADD MEMBERS */}\r\n                    <Sidebar  id=\"projectNav\" collapsible={true}>\r\n                        <Sidenav.Body>\r\n                        <Nav pullRight vertical>\r\n                        <Nav.Item \r\n                            title=\"Edit Project\"\r\n                            icon={<Icon icon={'pencil'}/>}\r\n                            componentClass={Link}\r\n                            to={`${match.url}/edit`}>Edit Project\r\n\r\n                        </Nav.Item>\r\n                        <Nav.Item\r\n                            title=\"View Graph\"\r\n                            icon={<Icon icon={'views-authorize'}/>}\r\n                            componentClass={Link}\r\n                            to={`${match.url}`}>View Graph\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                        </Sidenav.Body>\r\n                    </Sidebar>\r\n                    \r\n\r\n                    <Switch>\r\n                        <Route exact path={`${match.path}`} render={()=>{\r\n                            return <GraphPath updateParent={this.props.selectProject} project={project} user={this.props.user}/>\r\n    \r\n                        }} />\r\n                        <Route path={`${match.path}/edit`} render={()=>{\r\n                           return <ProjectInformation project={project}  user={this.props.user}/>\r\n                        }} \r\n                        />\r\n                    </Switch>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nProject.defaultProps = {\r\n    api:'http://localhost:9001'\r\n}\r\n\r\nProject.propTypes = {\r\n    project : PropTypes.object.isRequired,\r\n    api:PropTypes.string, \r\n    selectProject:PropTypes.func.isRequired ,\r\n    user:PropTypes.object.isRequired\r\n}\r\n\r\nexport default withRouter(Project) ;","import { React, Component } from 'react';\r\nimport PropTypes from 'prop-types' ;\r\nimport { Panel,Icon, Popover, Button, Whisper, Divider } from 'rsuite';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/*\r\n* ProjectCard is used to display the minimal description about the project\r\n* It Provides the following\r\n*   1. A display of the projectName on the header.\r\n*   2. A link to open the project - the path is provided in the props as well as the function to tell the parent the chosen project\r\n*   3. An information box that allows for \r\n*     3.1 Deletion of project - it receives the function to do so in the props \r\n*     3.2 Shows the description of project - the project object is received through props\r\n*     3.3 Editing the project - to save it receives the prop function to make the request.\r\n*\r\n*\r\n*\r\n*\r\n*/\r\n\r\nclass ProjectCard extends Component { \r\n  render(){\r\n    let {selectProject,deleteProject,project,link}= this.props ;\r\n    const projectInfo = (\r\n      <Popover title={`Project: ${project.projectName}`}>\r\n        <p>Description: {project.projectDescription}</p>\r\n        <br/>\r\n\r\n        <div>\r\n          MEMBERS: {\r\n            project.groupMembers !== undefined && project.groupMembers.length > 0 \r\n            ? project.groupMembers.map((member,index)=>{\r\n              return <Divider key={index}>\r\n                <Divider><Icon icon={'user-info'}/>{`${member.email}`} </Divider>\r\n              </Divider> \r\n            })\r\n            :<h5>No Members Yet</h5>\r\n          }\r\n        </div>\r\n\r\n        <br/>\r\n\r\n        <Button onClick={()=>deleteProject(project)}>\r\n          DELETE PROJECT\r\n        </Button>\r\n\r\n        <br/>\r\n        <Link to={`${link}/edit`}  onClick={()=>selectProject(project)}>\r\n          EDIT PROJECT\r\n        </Link>\r\n      </Popover>\r\n    )\r\n\r\n    return (\r\n    <div>\r\n        <Panel  shaded bordered bodyFill={false} style={{ display: 'inline-block', width: 240 }}\r\n        >\r\n        <Panel id=\"projHeader\" header={`${project.projectName}`}>\r\n          <div>\r\n            <small>Due Date: <h6>{project.dueDate}</h6> </small>\r\n          </div>\r\n          <h6>\r\n              Last Editted: {project.lastAccessed}\r\n          </h6>\r\n          <Whisper trigger={'click'} placement={'autoVertical'} speaker={projectInfo}>\r\n          <Icon icon='info' onClick={()=>console.log('clicked')}/>\r\n          </Whisper>\r\n          <br/>\r\n          <Link onClick={()=>selectProject(project)} to={`${link}`}>Open</Link>\r\n          <br/>\r\n        </Panel>\r\n      </Panel>\r\n      </div>\r\n    )}\r\n}\r\n\r\n\r\nProjectCard.propTypes ={\r\n  project:PropTypes.object.isRequired ,\r\n  link:PropTypes.string ,\r\n  selectProject:PropTypes.func ,\r\n  deleteProject:PropTypes.func\r\n}\r\n\r\nexport default ProjectCard ;\r\n\r\n\r\n","import  React from 'react' ;\r\nimport '../css/NewProject.css';\r\nimport CustomField from './Reusable/CustomField';\r\nimport PropTypes from 'prop-types' ;\r\nimport {format} from 'date-fns' ;\r\nimport {\r\n    Modal,\r\n    Button,\r\n    ControlLabel,\r\n    DatePicker,\r\n    Form,\r\n    FormControl,\r\n    FormGroup,\r\n    HelpBlock,Schema\r\n} from 'rsuite';\r\n\r\nclass NewProject extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        let now = new Date() ;\r\n        this.state={\r\n            show:false,\r\n            next:false,\r\n            formValue:{\r\n                projectName:'',\r\n                description:'',\r\n                startDate: new Date(now.getFullYear(),now.getMonth(),now.getDate()),//.toJSON().slice(0,10) ,\r\n                dueDate: new Date(now.getFullYear(),now.getMonth()+1,now.getDate()),//.toJSON().slice(0,10),\r\n            },\r\n            formError:{}\r\n        }\r\n    }\r\n    componentDidMount(){\r\n    }\r\n\r\n    cleanUp=()=>{\r\n        let now = new Date() ;\r\n        this.setState({\r\n            show:false,\r\n            next:false,\r\n           formValue:{\r\n               projectName:'',\r\n               description:'',\r\n               startDate: new Date(now.getFullYear(),now.getMonth(),now.getDate()),//.toJSON().slice(0,10) ,\r\n               dueDate: new Date(now.getFullYear(),now.getMonth()+1,now.getDate()),//.toJSON().slice(0,10),\r\n           },\r\n           formError:{}\r\n        })\r\n    }\r\n\r\n    handleSubmit=()=>{\r\n        // console.log('min proj',this.state.formValue)\r\n        const {formValue} = this.state ;\r\n        let updated = {...formValue} ;\r\n        if ( formValue.dueDate instanceof Date ){\r\n            \r\n            let d1 = format(updated.dueDate,'yyyy-MM-dd')\r\n            updated.dueDate = d1 ;\r\n        }\r\n\r\n        if (formValue.startDate instanceof Date ){\r\n        // console.log('yes issued is Date')\r\n            let d1 = format(updated.startDate,'yyyy-MM-dd')\r\n            updated.startDate = d1 ;\r\n        }\r\n        // console.log('yes issued is Date',updated)\r\n\r\n        // let project = Object.assign(updated,this.props.preInfo)\r\n        if (!this.form.check()){\r\n            console.log('Form error')\r\n        }\r\n        else{\r\n            this.props.sendProjectInfo(updated) ; //props\r\n        }\r\n    }\r\n\r\n\r\n    handleShow=()=>{\r\n        this.setState({\r\n            show:true\r\n        })\r\n    }\r\n\r\n    handleNext=()=>{\r\n        this.setState({\r\n            next:!this.state.next\r\n        })\r\n    }\r\n\r\n    handleInfoChange=(form)=>{\r\n        // console.log('update',form) ;\r\n        this.setState({\r\n            formValue:form\r\n        }) ;\r\n\r\n    }\r\n\r\n    handleProjectErrors = (formError)=>{\r\n        this.setState({\r\n            formError\r\n        }) ;\r\n    }\r\n\r\n    render(){\r\n        const {formError,formValue} = this.state ;\r\n        const {DateType,StringType} = Schema.Types ;\r\n        let due = new Date() ;\r\n        due.setFullYear(due.getFullYear()+2)\r\n        const projectModel =Schema.Model({\r\n            projectName: StringType().minLength(2,'Project name should have more than 2 letters')\r\n                .isRequired('This field is required.') ,\r\n            startDate:DateType().min(new Date(due.getFullYear()-2,due.getMonth(),due.getDate()-1),'The start date cannot be set to a date that has passed by more than a day.')\r\n                .isRequired('This field is required.') ,\r\n            dueDate:DateType().min(this.state.formValue.startDate,'The due date cannot be before start date or a date in the past.')\r\n                .isRequired('This field is required.') ,\r\n            description: StringType().minLength(5,'Please add more details on the description')\r\n                .isRequired('This field is required.') ,\r\n        })\r\n        // console.log('np',this.props)\r\n\r\n        return( \r\n            <>\r\n            <Modal data-testid=\"modal-id-test\" backdrop={\"static\"} show={this.state.show} onHide={this.cleanUp}>\r\n                <Modal.Header>\r\n                    <Modal.Title>New Project</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n\r\n                    <Form formValue={formValue}\r\n                        model={projectModel}\r\n                        ref={ref=>(this.form=ref)}\r\n                        onCheck={formError=>this.handleProjectErrors(formError)} \r\n                        onChange={this.handleInfoChange}\r\n                    >\r\n                        <FormGroup>\r\n                            <ControlLabel>Project Name</ControlLabel>\r\n                            <FormControl name=\"projectName\" placeholder=\"Project Name\" />\r\n                            <HelpBlock tooltip>Required</HelpBlock>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <ControlLabel>Description</ControlLabel>\r\n                            <FormControl name=\"description\" placeholder=\"Project Description\"  />\r\n                            <HelpBlock tooltip>Required</HelpBlock>\r\n                        </FormGroup>\r\n\r\n                        <CustomField \r\n                            accepter={DatePicker}\r\n                            name={\"startDate\"} \r\n                            label={\"Start Date\"}\r\n                            oneTap={true}\r\n                            format={'YYYY-MM-DD'}\r\n                            error={formError.startDate}\r\n                        />\r\n\r\n                        <CustomField \r\n                            accepter={DatePicker}\r\n                            name={\"dueDate\"}\r\n                            label={\"Due Date\"}\r\n                            oneTap={true}\r\n                            format={'YYYY-MM-DD'}\r\n                            error={formError.dueDate}\r\n                        />\r\n\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={this.handleSubmit}>\r\n                        Create\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n                </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nNewProject.propTypes = {\r\n    sendProjectInfo : PropTypes.func.isRequired,\r\n    api:PropTypes.string.isRequired,\r\n}\r\n\r\nexport default NewProject ; \r\n\r\n\r\n// {\r\n//     \"email\": \"ntpnaane@gmail.com\",\r\n//     \"role\": \"Project Manager\",\r\n//     \"label\": \"Godiragetse Naane\",\r\n//     \"permissions\": [\r\n//       \"edit\",\r\n//       \"view\",\r\n//       \"delete project\",\r\n//       \"add members\"\r\n//     ]\r\n//   },","import {React,Component} from \"react\";\r\nimport PropTypes from 'prop-types' ;\r\nimport {Icon,SelectPicker, Loader, Button} from 'rsuite' ;\r\nimport \"../css/ProjectManager.css\"\r\nimport { Route ,Switch, withRouter} from \"react-router-dom\";\r\nimport axios from 'axios' ;\r\nimport { connect} from 'react-redux' ;\r\nimport PopUpMessage from './Reusable/PopUpMessage';\r\nimport Project from \"./Project\";\r\nimport ProjectCard from './Reusable/ProjectCard' ;\r\nimport NewProject from \"./NewProject\";\r\n\r\n/**\r\n*   A component that will make async request to peer server for all projects of the logged user, provided in the props   \r\n*  \tIt aims to make a list of projects organised in a recently accessed order. When the project opened\r\n*   by default it opens the graph in the specified project. When the project is opened, it should show the graph that will \r\n*   take up most of the screen.\r\n*   Project Manager lists all the projects and requests the peer server for meta data about the projects.\r\n*   It provides a function for the child component to save the project changes including the graph\r\n*\t@component ProjectManager\r\n*\t@returns {JSX} <ProjectManager />\r\n*\r\n*/\r\n\r\nclass ProjectManager extends Component {\r\n\t/**\r\n\tProjectManager has a private state.\r\n\t@constructs state\r\n\t@memberof state#\r\n\t*/\r\n\r\n    constructor(props){\r\n        super(props) ;\r\n        this.state = {\r\n            sortValue:'recent',\r\n            loading:false,\r\n            currentProject:{},\r\n            projects:[],\r\n            allProjects:[],\r\n            filterValue: 'all',\r\n            filteredProjects:{}\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.viewProjectsFromAPI() ;\r\n    }\r\n /**\r\nA method that requests for all the projects of the logged user and sets the result to Project Manager state.projects.\r\nWhen the request fails to retrieve any projects it alerts them.\r\n* @returns {void} The method updates the state of Project\r\n\r\n*/\r\n    viewProjectsFromAPI=()=>{\r\n        this.setState({\r\n            loading:true \r\n        }) ;\r\n\r\n        axios.get(`${this.props.api}/project/getAllProjectsByUserEmail/${this.props.loggedUser.email}`,{\r\n            headers:{\r\n                authorization: this.props.loggedUser.token \r\n            }\r\n        })\r\n        .then((res)=>{\r\n            console.log('Success',res) ;\r\n            if (res.data.data !== undefined){\r\n                this.setState({\r\n                    projects :res.data.data ,\r\n                    allProjects: res.data.data ,\r\n                    loading:false\r\n                        \r\n                }) ;\r\n            }\r\n            else{\r\n                this.setState({\r\n                    loading:false                    \r\n                }) ;\r\n                alert('No projects')\r\n            }\r\n\r\n        })\r\n        .catch((err)=>{\r\n            \r\n            this.setState({\r\n                loading:false                                        \r\n            }) ;\r\n            console.log('Error or Rejected',err)\r\n        })\r\n    }\r\n\r\n    selectCurrentProject=(project)=>{\r\n        this.setState({\r\n            currentProject:project\r\n        })//,()=>this.updateLastAcessed(project)) ;\r\n        \r\n    }\r\n\r\n    updateLastAcessed = (project)=>{\r\n       //check if date on project is not over minutes .\r\n       //if it is update the project. If not ? don't update.\r\n       let accessedProject = {\r\n           lastDateAccessed : new Date().toJSON().slice(0,19) ,\r\n           projId: project[\"_id\"] \r\n       } \r\n       console.log('B4 update',accessedProject)\r\n       axios.put(`${this.props.api}/project/updateProjectAccessDate`,accessedProject)\r\n       .then((res)=>{\r\n           console.log('comms for accessdate',res) ;\r\n           if (res.data.data){\r\n               this.viewProjectsFromAPI() ;\r\n           }\r\n           else{\r\n               console.log('Did not update access date successfully') ;\r\n           }\r\n       })\r\n       .catch((err)=>{\r\n           console.log('Comm Error',err) ;\r\n       }) ;\r\n\r\n\r\n       \r\n    }\r\n\r\n/**\r\nA function that makes a request to delete the seletected project.\r\nIf the user does not have the right permissions the project will not be deleted.\r\nThe neccesary information for the request to go through follows:\r\n@param {Object} project - The project object should contain projectID , email and permissions.\r\n@param {string} project[].email - The email of requesting user.\r\n@param {string} project[].projectID - the unique id of the project.\r\n@returns {void} The method updates the state of Project\r\n*/\r\n\r\n\r\n    deleteProject=(project)=>{\r\n    //make request for deleting project.\r\n        if(project === undefined){\r\n            alert('Can\\'t delete Project. Project Invalid') ;\r\n        }\r\n        else{\r\n\r\n            let deleteAns = window.confirm('Are you sure you want to delete project ['+project.projectName+'] ?') ;\r\n            if (deleteAns){\r\n           \r\n                this.setState({\r\n                    loading:true,\r\n                    // linkNumber:-1\r\n                }) ;\r\n                console.log('B4 del',project)\r\n                axios.delete(`${this.props.api}/project/deleteProject`,{\r\n                    headers:{\r\n                        authorization:this.props.loggedUser.token\r\n                    } ,\r\n                    data:{\r\n                        email:this.props.loggedUser.email,\r\n                        projectID:project._id\r\n                    }\r\n                })\r\n                .then((res)=>{\r\n                    if (res.status >=400){\r\n                        throw res ;\r\n                    }\r\n                    if(res.data.message === undefined){\r\n                        alert('Network Error') ;\r\n                        this.setState({\r\n                            loading:false\r\n                        }) ;\r\n                    }\r\n                    else{\r\n                        this.setState({\r\n                            answer:res.data.message\r\n                        })//,()=>this.showPopUP()) ;\r\n                        ;\r\n                        this.viewProjectsFromAPI() ;\r\n                    }\r\n                })\r\n                .catch(err=>{\r\n                    console.log(\"error\",err)\r\n                    this.setState({\r\n                        loading:false\r\n                    }) ;\r\n                }) ;\r\n            }\r\n            else{\r\n                PopUpMessage('Project not deleted','info')\r\n            }\r\n        \r\n        }\r\n    }\r\n\r\n    handleSortChange =(value)=>{\r\n        // console.log('value',value )\r\n        this.setState({\r\n            sortValue:value\r\n        },()=>this.sortProjects()) ;\r\n    }\r\n\r\n    handleFilterChange = (value)=>{\r\n        this.setState({\r\n            filterValue:value\r\n        }, ()=> this.filterProjects());\r\n    }\r\n\r\n    sortProjects = ()=>{\r\n        //if recent? newest last aceess date comes first\r\n        //if alphabetical ? project name is used to sort alphabetically\r\n        //if date ? oldest project first\r\n        // console.log('sorting...') ;\r\n        if (this.state.sortValue === 'recent'){\r\n            let newArray = this.state.projects.sort((v1,v2,)=>{\r\n                let date1=v1.lastAccessed.toLowerCase();\r\n                let date2 = v2.lastAccessed.toLowerCase();\r\n\r\n                if(date1<date2){\r\n                    //date1 came first, put last\r\n                    return 1 ;\r\n                }\r\n                if (date1>date2){\r\n                    return -1 ;\r\n                }\r\n                return 0 ;\r\n            }) ;\r\n            this.setState({\r\n                projects:newArray ,\r\n            }) ;\r\n        }\r\n        else if (this.state.sortValue === 'alpha'){\r\n            let sortedArray = this.state.projects.sort((v1,v2)=>{\r\n                let date1 = v1.projectName.toLowerCase() ;\r\n                let date2 = v2.projectName.toLowerCase() ;\r\n\r\n                if (date1<date2){\r\n                    return -1 ;\r\n                }\r\n                else if (date1>date2){\r\n                    return 1 ;\r\n                }\r\n                return 0 ;\r\n            })\r\n            this.setState({\r\n                projects:sortedArray\r\n            }) ;\r\n        }\r\n        else{\r\n            let newArray = this.state.projects.sort((v1,v2,)=>{\r\n                let date1=v1.startDate.toLowerCase();\r\n                let date2 = v2.startDate.toLowerCase();\r\n\r\n                if(date1<date2){\r\n                    //date1 came first, put last\r\n                    return 1 ;\r\n                }\r\n                if (date1>date2){\r\n                    return -1 ;\r\n                }\r\n                return 0 ;\r\n            }) ;\r\n            this.setState({\r\n                projects:newArray ,\r\n            }) ;\r\n            \r\n\r\n        }\r\n    }\r\n\r\n    //Filter Projects\r\n    filterProjects = ()=>{\r\n        //console.log('email: ', this.props.loggedUser.email)\r\n        if(this.state.filterValue === 'myOwn') {\r\n\r\n            let projectsByEmail1 = this.state.allProjects.filter((myProjects1)=>{\r\n                    return myProjects1.projectOwner === this.props.loggedUser.email;\r\n            });\r\n            this.setState({\r\n                projects:projectsByEmail1\r\n            })\r\n        }\r\n        else if(this.state.filterValue === 'shared'){\r\n            let projectsByEmail2 = this.state.allProjects.filter((myProjects2)=>{\r\n                    return myProjects2.projectOwner !== this.props.loggedUser.email;\r\n            });\r\n            this.setState({\r\n                projects:projectsByEmail2\r\n            })\r\n        }\r\n        else{\r\n            console.log('all')\r\n            this.setState({\r\n                projects: this.state.allProjects\r\n            })\r\n\r\n\r\n        }\r\n    }\r\n    newProjectModalRef=(obj)=>{\r\n        this.showModal = obj && obj.handleShow;\r\n    }\r\n\r\n    showM=()=>{\r\n        this.showModal();\r\n    }\r\n    /**\r\n\t@param {Object} project object together with request identity\r\n    */\r\n\r\n    sendProjectInfo=(project)=>{\r\n\r\n        project.email = this.props.loggedUser.email ;\r\n\r\n        console.log('b4 api',project) ;\r\n\r\n        axios.post(`${this.props.api}/project/newProject`,project,{\r\n            headers:{\r\n                authorization:this.props.loggedUser.token,\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n            }\r\n            \r\n        })\r\n        .then((res)=>{\r\n        console.log('api',res) ;\r\n            if(res.headers.authorization){\r\n                PopUpMessage('Project created','success')\r\n                this.props.updateUserToken(res.headers.authorization)\r\n                this.viewProjectsFromAPI() ;\r\n            }\r\n            else{\r\n                PopUpMessage(`${res.data.message}`,'warning')\r\n            }\r\n        },(reject)=>console.log('rejected',reject))\r\n        .catch((err)=>{\r\n            for (let key of Object.keys(err)){\r\n                console.log(key,': ',err[key])\r\n\r\n            }\r\n            console.log('err',err)\r\n        })\r\n    }\r\n\r\n    \r\n    \r\n    render(){\r\n        // let fullProject = {}\r\n        // fullProject.owner = this.props.user.email ;\r\n        // fullProject.graph = {} ;\r\n        // fullProject.groupMembers = [{\r\n        //     email:this.props.user.email,\r\n        //     role:\"owner\",\r\n        //     label:this.props.user.name === undefined ?this.props.user.email :this.props.user.name,\r\n        //     permissions:[\r\n        //         \"owner\"\r\n        //     ]\r\n        // }]\r\n        // console.log('mgr',this.props)\r\n\r\n\r\n        const options = [{\r\n            label:'Recently Accessed',value:'recent'},{label:'Alphabetical',value:'alpha'},{label:'Date Created',value:'date'}] ;\r\n        const filterOptions=[{label:'All Projects', value:'all'},{label:'Projects I Own', value:'myOwn'},{label:'Projects Shared with me', value:'shared'}];\r\n        const {match} = this.props ;\r\n        if (this.state.loading){\r\n            return <Loader backdrop={false} speed={'slow'} size={'lg'} />\r\n        }\r\n        else{\r\n            return( \r\n                <div data-testid=\"tidProjectManager\" id=\"projectManager\">\r\n                    <NewProject ref={this.newProjectModalRef} sendProjectInfo={this.sendProjectInfo} api={this.props.api} />\r\n\r\n                   <Switch>\r\n                        <Route path={`${match.path}/project`} render={()=>{\r\n                                return <Project  user={this.props.loggedUser} project={this.state.currentProject} \r\n                                selectProject={this.selectCurrentProject}/>\r\n                        }}/>\r\n                        <Route >\r\n                            <div>\r\n                            Sort Projects <br/>\r\n                            <Button onClick={this.showM}>\r\n                                <Icon icon={'plus-circle'} title={\"New Project\"}/>\r\n                            </Button>\r\n\r\n                                <SelectPicker data={filterOptions} value={this.state.filterValue} onChange={this.handleFilterChange}/>\r\n                            <SelectPicker data={options} value={this.state.sortValue} onChange={this.handleSortChange}/>\r\n\r\n                            <div data-testid=\"tidProjList\" id=\"projects-list\">\r\n                                {\r\n                                this.state.projects.length > 0?\r\n                                this.state.projects.map((project,index)=>{\r\n                                return <ProjectCard key={`${index+1}${project.projectName}`} \r\n                                project={project} \r\n                                link={`${match.url}/project`} \r\n                                selectProject={this.selectCurrentProject}\r\n                                deleteProject={this.deleteProject} />    \r\n                            })\r\n                            :<div>\r\n                                <h1>No Projects found please refresh</h1>\r\n                            </div>\r\n                                            \r\n                        }\r\n                            \r\n                                </div>\r\n                    \r\n                            </div>\r\n                        </Route>\r\n                    </Switch>\r\n        \r\n                    \r\n                </div>)\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nProjectManager.propTypes = {\r\n    user :PropTypes.object,\r\n    api:PropTypes.string\r\n\r\n}\r\n\r\nProjectManager.defaultProps = {\r\n    user: {\r\n        email : 'ntpnaane@gmail.com' \r\n    } ,\r\n    api:'http://localhost:9001'\r\n}\r\nfunction updateUserToken(token){\r\n    return {\r\n      type:'UPDATE_TOKEN' ,\r\n      payload: {\r\n        token:token\r\n      }\r\n    }\r\n  }\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        loggedUser:state.loggedUser\r\n    } ;\r\n  }\r\n  \r\n\r\nconst mapDispatchToProps = {\r\n    updateUserToken,\r\n  }\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(ProjectManager)) ; \r\n\r\n// def:[{\r\n//     projectName:\"T1\",\r\n//     lastDateAccessed: new Date().toJSON().slice(0,17) ,\r\n// },{\r\n//     projectName:\"T2\",\r\n//     lastDateAccessed: new Date(\"2021-08-22T16:00\").toJSON().slice(0,17) ,\r\n// },{\r\n//     projectName:\"S2\",\r\n//     lastDateAccessed: new Date(\"2021-08-12T16:00\").toJSON().slice(0,17) ,\r\n// },{\r\n//     projectName:\"T1\",\r\n//     lastDateAccessed: new Date().toJSON().slice(0,17) ,\r\n// },{\r\n//     projectName:\"T2 2\",\r\n//     lastDateAccessed: new Date(\"2021-05-22T16:00\").toJSON().slice(0,17) ,\r\n// },{\r\n//     projectName:\"S2 65\",\r\n//     lastDateAccessed: new Date(\"2021-06-15T16:00\").toJSON().slice(0,17) ,\r\n// },{\r\n//     projectName:\"T56\",\r\n//     lastDateAccessed: new Date().toJSON().slice(0,17) ,\r\n// },{\r\n//     projectName:\"T2 3\",\r\n//     lastDateAccessed: new Date(\"2021-03-23T16:00\").toJSON().slice(0,17) ,\r\n// },{\r\n//     projectName:\"S2 45\",\r\n//     lastDateAccessed: new Date(\"2021-08-15T16:00\").toJSON().slice(0,17) ,\r\n// }]","export default __webpack_public_path__ + \"static/media/Logo3.ba0a191c.png\";","import React from 'react' ;\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    ButtonToolbar,\r\n    ControlLabel,\r\n    Divider,\r\n    Drawer,\r\n    Form,\r\n    FormControl,\r\n    FormGroup,\r\n    HelpBlock\r\n} from \"rsuite\";\r\nimport '../css/Profile.css'\r\nimport Logo from \"../img/Logo3.png\";\r\nclass Profile extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            show:false,\r\n            disabled: true\r\n        }\r\n    }\r\n\r\n    handleShow=()=>{\r\n        this.setState({\r\n            show:true\r\n        })\r\n    }\r\n\r\n    handleClose=()=>{\r\n        this.setState({\r\n            show:false\r\n        })\r\n    }\r\n\r\n    enableEdit = () => {\r\n        this.setState({\r\n            disabled: !this.state.disabled\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const picture = this.props.user.picture;\r\n        const user = this.props.user;\r\n        return(\r\n            <>\r\n                <Drawer full placement={\"top\"} backdrop={\"static\"} show={this.state.show} onHide={this.handleClose}>\r\n                    <Drawer.Header>\r\n                        <Drawer.Title style={{textAlign:\"center\"}}>Profile</Drawer.Title>\r\n                        <Divider/>\r\n                    </Drawer.Header>\r\n                    <Drawer.Body id=\"body-div\">\r\n                        <div id=\"picture-div\">\r\n\r\n                            <img src={picture} />\r\n                            <Divider/>\r\n                            <h6>{this.props.user.name}</h6>\r\n\r\n                        </div>\r\n                        <div id=\"div-form\">\r\n                            <form className=\"profileForm\" onSubmit={this.onSubmit} >\r\n                                <label>Username</label>\r\n                                <input defaultValue={this.props.user.name}\r\n                                       disabled = {!!(this.state.disabled)}\r\n                                       onChange={this.change}\r\n                                       type='text'    />\r\n\r\n\r\n                                <label>Email</label>\r\n                                <input value={user.email}\r\n                                       disabled\r\n                                       type='text'/>\r\n\r\n\r\n                                {/*<label>Password</label>*/}\r\n                                {/*<input*/}\r\n                                {/*       type='text'*/}\r\n                                {/*       name=\"dueDate\"*/}\r\n                                {/*       onChange={this.change}*/}\r\n                                {/*       disabled = {!!(this.state.disabled)}/>*/}\r\n\r\n                                {/*<Button disabled = {(this.state.disabled) ? \"\" : \"disabled\"}*/}\r\n                                {/*        onClick={this.enableEdit}>Edit</Button>*/}\r\n                                {/*<Button disabled = {(this.state.disabled) ? \"disabled\" : \"\"}*/}\r\n                                {/*        onClick={this.enableEdit}>Cancel</Button>*/}\r\n\r\n                            </form>\r\n\r\n                        </div>\r\n                        <img id=\"logo-pics\" src={Logo}/>\r\n                    </Drawer.Body>\r\n                </Drawer>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport {useAuth0} from '@auth0/auth0-react';\r\nimport {Button} from \"rsuite\";\r\n\r\nconst Logout=()=>{\r\n    const {logout} = useAuth0();\r\n    return(\r\n        <>\r\n            <Button onClick={()=>logout()} id='signup-btn'>Logout</Button>\r\n        </>\r\n    )\r\n}\r\nexport default Logout;","export default __webpack_public_path__ + \"static/media/Logo4.008292a7.png\";","import * as React from 'react'\r\nimport '../css/App.css';\r\nimport '../css/Kanban.css';\r\nimport { KanbanComponent, ColumnsDirective, ColumnDirective } from '@syncfusion/ej2-react-kanban';\r\nimport axios from 'axios';\r\nimport PropTypes from 'prop-types' ;\r\nimport {connect} from \"react-redux\";\r\nimport {Loader} from 'rsuite' ;\r\nimport { Query } from '@syncfusion/ej2-data';\r\nimport { TextBoxComponent } from '@syncfusion/ej2-react-inputs';\r\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\r\n\r\nclass Kanban extends React.Component {\r\n\r\n    //\r\n    constructor(props) {\r\n        super(props);\r\n        this.task = [];\r\n        this.myData2 = [];\r\n        this.nyData3 = [];\r\n        this.state = {\r\n            loading: false,\r\n            test: [[]],\r\n            projectsByEmail: [],\r\n            projectsByEmail2: [],\r\n            allTasks: [],\r\n\r\n        };\r\n        this.fields = [{text: 'Unique ID', key: '_id'},\r\n            {key: 'status', type: 'DropDown'},\r\n            {key: 'description', type: 'TextArea'}]\r\n    }\r\n\r\n    columnTemplate(heading) {\r\n        return (<div className=\"header-template-wrap\">\r\n            <div className={\"header-icon e-icons \" + heading.keyField}></div>\r\n            <div className=\"header-text\">{heading.headerText}</div>\r\n        </div>);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.firstSearch();\r\n    }\r\n\r\n    firstSearch = () => {\r\n        this.setState({\r\n            loading:true\r\n        }) ;\r\n        axios.get(`${this.props.api}/project/convertToKanbanBoard/${this.props.loggedUser.email}`, {\r\n            headers: {\r\n                authorization: this.props.user.token\r\n            }\r\n        })\r\n            .then((res) => {\r\n                if (res.data !== undefined) {\r\n                    let tasks = []\r\n                    let count = 1;\r\n                    console.log('length 79', res.data.data.length);\r\n                    for (let i = 0; i < res.data.data.length; i++) {\r\n                        console.log('project 81', res.data.data[i]);\r\n                        let project = res.data.data[i];\r\n\r\n                        for (let j = 0; j < project.tasks.length; j++) {\r\n                            let task = project.tasks[j];\r\n                            task.projectName = project.projectName;\r\n                            task.Priority = task.status;\r\n                            task.newID = count++;\r\n                            tasks.push(task);\r\n\r\n                        }\r\n\r\n                    }\r\n                    this.setState({projectsByEmail: tasks,  loading:false})\r\n                }else {\r\n                    this.setState({\r\n                        loading:false\r\n                    }) ;\r\n                }\r\n\r\n            })\r\n            .catch((err) => {\r\n                console.log('error in initialization', err)\r\n            })\r\n\r\n    }\r\n\r\n\r\n    onDropHandler = (event) => {\r\n        console.log(event.data)\r\n    }\r\n\r\n\r\n    cardTemplate(props) {\r\n        return (<div className=\"card-template\">\r\n            <div className=\"card-template-wrap\">\r\n                <table className=\"card-template-wrap\">\r\n                    <colgroup>\r\n                        <col style={{width: \"55px\"}}/>\r\n                        <col/>\r\n                    </colgroup>\r\n                    <tbody>\r\n                    <tr>\r\n\r\n                        <td className=\"e-title\">\r\n                            <div className=\"e-card-stacked\">\r\n                                <div className=\"e-card-header\">\r\n                                    <div className=\"e-card-header-caption\">\r\n                                        <div style={{color: \"#1386d9\"}}\r\n                                             className=\"e-card-header-title e-tooltip-text\">{props.title}</div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"e-card-content\" style={{lineHeight: \"2.75em\"}}>\r\n                                    <table className=\"card-template-wrap\" style={{tableLayout: \"auto\"}}>\r\n                                        <tbody>\r\n                                        <tr>\r\n                                            {(props.status === 'not started' || props.status === 'in progress' || props.status === 'complete') &&\r\n                                            <td colSpan={2}>\r\n                                                {props.status !== '' &&\r\n                                                <div className=\"e-description e-tooltip-text\">{props.description}</div>}\r\n\r\n                                            </td>}\r\n                                            {(props.status === 'complete') && <td className=\"card-content\">\r\n\r\n                                            </td>}\r\n                                        </tr>\r\n                                        <tr>\r\n\r\n                                            {props.status !== '' && <td className=\"card-content\">\r\n                                                {props.status === 'not started' &&\r\n                                                <div className=\"e-preparingText e-tooltip-text\">Not Started</div>}\r\n                                                {props.status === 'in progress' &&\r\n                                                <div className=\"e-readyText e-tooltip-text\">In Progress</div>}\r\n                                                {(props.status === 'complete') &&\r\n                                                <div className=\"e-deliveredText e-tooltip-text\">Complete</div>}\r\n\r\n\r\n                                            </td>}\r\n                                        </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>);\r\n    }\r\n    //Event after moving the card...\r\n   onDragStop = (event) =>{\r\n        console.log('afterDrag data: ', event.data);\r\n    this.updateChanges(event.data[0]);\r\n    }\r\n\r\n    //Post clicking the save button\r\n    onDataBound = (event) => {\r\n        console.log('afterSave data:', event)\r\n    }\r\n\r\n    updateChanges = (newData) =>{\r\n        newData.taskID = newData._id ;\r\n        console.log('updated ',newData) ;\r\n\r\n        axios.patch(`${this.props.api}/task/updateEverythingTask`,newData,{\r\n            headers:{\r\n                authorization:this.props.loggedUser.token\r\n            }\r\n        })\r\n       .then((response)=>{\r\n           console.log(response);\r\n       })\r\n       .catch((error)=>{\r\n           if(error.response)\r\n           {\r\n               console.log(error.response);\r\n           }\r\n\r\n       })\r\n    }\r\n\r\n    searchClick(userInput){\r\n        let searchValue=userInput.value;\r\n        let searchQuery=new Query();\r\n        if(searchValue !== ''){\r\n            searchQuery=new Query().search(searchValue,['_id', 'description', 'title','projectName'], 'contains', true);\r\n        }\r\n        this.kanbanObj.query=searchQuery;\r\n    }\r\n\r\n    reset(){\r\n        this.kanbanObj.query=new Query();\r\n    }\r\n\r\n    resetClick(){\r\n        document.getElementById('search_text').value='';\r\n        this.reset();\r\n    }\r\n\r\n    onFocus(element){\r\n        if (element.target.value === ''){\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading){\r\n            return <Loader backdrop={false} speed={'slow'} size={'lg'} />\r\n        }\r\n        else{\r\n            return (\r\n\r\n                <div className='schedule-control-section'>\r\n\r\n                    <div className='col-lg-12 control-section'>\r\n                        <div className='control-wrapper'>\r\n\r\n                            <KanbanComponent cssClass=\"kanban-card-template\" id=\"kanban\" keyField=\"status\"\r\n                                             enableTooltip={true}\r\n                                             dataSource={this.state.projectsByEmail} cardSettings={{\r\n                                contentField: \"description\",\r\n                                headerField: \"_id\",\r\n                                template: this.cardTemplate.bind(this)\r\n                            }}\r\n                                             swimlaneSettings={{keyField: \"projectName\", textField: \"projectName\"}}\r\n                                             cardClick={this.handler} style={{background: \"black\"}}\r\n                                             dragStop={this.onDragStop.bind(this)}  dataBound={this.onDataBound.bind(this)}\r\n                                             ref={(kanban) => { this.kanbanObj = kanban; }}\r\n                            >\r\n                                <ColumnsDirective>\r\n                                    <ColumnDirective headerText=\"Not Started\" keyField=\"not started\"\r\n                                                     template={this.columnTemplate.bind(this)}/>\r\n                                    <ColumnDirective headerText=\"In Progress\" keyField=\"in progress\"\r\n                                                     template={this.columnTemplate.bind(this)}/>\r\n                                    <ColumnDirective headerText=\"Complete\" keyField=\"complete\"\r\n                                                     template={this.columnTemplate.bind(this)}/>\r\n                                </ColumnsDirective>\r\n                            </KanbanComponent>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-lg-3 property-section\">\r\n                        <div className=\"property-panel-section\">\r\n                            <p className=\"property-panel-header\">Searching</p>\r\n                            <div className=\"property-panel-content\">\r\n                                <table className=\"e-filter-table\">\r\n                                    <tr>\r\n                                        <td>\r\n                                            <div>\r\n                                                <TextBoxComponent id=\"search_text\" ref={(kanban) => { this.textBoxObj = kanban; }} showClearButton={true} placeholder=\"Enter search text\" onFocus={this.onFocus.bind(this)} input={this.searchClick.bind(this)} style={{color: \"white\"}}/>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                </table>\r\n                                <div className='e-reset-button'>\r\n                                    <ButtonComponent id='reset_filter' className=\"e-btn\" onClick={this.resetClick.bind(this)}>Reset</ButtonComponent>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nKanban.defaultProps = {\r\n    api:'http://localhost:9001'\r\n}\r\n\r\nKanban.propTypes = {\r\n    user: PropTypes.object, \r\n    api: PropTypes.string\r\n}\r\n\r\n\r\nfunction updateUserToken(token){\r\n    return {\r\n        type:'UPDATE_TOKEN' ,\r\n        payload: {\r\n            token:token\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        loggedUser:state.loggedUser\r\n    } ;\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    updateUserToken,\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Kanban) ;","import React from 'react';\r\nimport axios from \"axios\";\r\nimport {Button, Dropdown, FlexboxGrid, List} from \"rsuite\";\r\nimport {Radar} from 'react-chartjs-2';\r\nimport Logo from \"../img/Logo4.png\";\r\n\r\nclass RadarChart extends React.Component{\r\n    constructor(props){\r\n        super(props) ;\r\n        this.state = {\r\n            currentProject:{},\r\n            projects:[],\r\n            nodes:[],\r\n            api:'http://localhost:9001',\r\n            showChart: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAllProjects() ;\r\n\r\n    }\r\n\r\n    getProjectChart=(projId)=>{\r\n        if(this.state.projects.length > 0 ) {\r\n            this.setState({\r\n                showChart:true\r\n            })\r\n            console.log(\"get proj id\", this.state.projId)\r\n\r\n\r\n            axios.get(`${this.state.api}/project/statistics/RadarGraph/`+projId, {\r\n                headers: {\r\n                    authorization: this.props.user.token\r\n                }\r\n            }).then((res) => {\r\n                console.log('Stats Success', res.data.data);\r\n                if (res.data.data !== undefined) {\r\n                    this.setState({\r\n                        nodes: res.data.data,\r\n                        // loading:false\r\n\r\n                    });\r\n                }\r\n            })\r\n                .catch((err) => {\r\n                    console.log('Error or Rejected', err)\r\n                })\r\n        }\r\n    }\r\n\r\n    getAllProjects=()=>{\r\n\r\n        axios.get(`${this.state.api}/project/getAllProjectsByUserEmail/${this.props.user.email}`,{\r\n            headers:{\r\n                authorization: this.props.user.token\r\n            }\r\n        })\r\n            .then((res)=>{\r\n                console.log('Success',res) ;\r\n                if (res.data.data !== undefined){\r\n                    this.setState({\r\n                        projects :res.data.data ,\r\n                        // loading:false\r\n\r\n                    }) ;\r\n                    // if(this.state.projects > 0){\r\n                    // this.getProjectChart();\r\n                    // }\r\n\r\n                }\r\n                else{\r\n                    // this.setState({\r\n                    //     loading:false\r\n                    // }) ;\r\n                    alert('No projects')\r\n                }\r\n\r\n            })\r\n            .catch((err)=>{\r\n\r\n                // this.setState({\r\n                //     loading:false\r\n                // }) ;\r\n                console.log('Error or Rejected',err)\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        // console.log('stats proj',this.state.projects.length)\r\n        if(this.state.projects.length > 0){\r\n            console.log('stats proj',this.state.projId)\r\n            // const data = {\r\n            //     labels\r\n            // }\r\n\r\n        }\r\n        console.log(\"nodes\",this.state.nodes)\r\n\r\n        /***\r\n         * What project have\r\n         * show:\r\n         * name\r\n         * owner\r\n         * create an icon\r\n         * have view button\r\n         */\r\n        return(\r\n            <>\r\n\r\n                <div>\r\n                    <h3>Project Tasks Statistics</h3>\r\n                    <Dropdown title={\"Projects\"}>\r\n                        <Dropdown.Item style={{minWidth:\"30vw\",marginRight:\"10%\"}}>\r\n                            <List hover>\r\n                                {this.state.projects.map((item,index)=>\r\n                                    item.projectOwner === this.props.user.email || item.permissions.includes(\"view statistics\")?\r\n                                    <List.Item key={item['projectName']} index={index}>\r\n                                        <FlexboxGrid>\r\n                                            <FlexboxGrid.Item\r\n                                                colspan={6}\r\n                                                // style={{\r\n                                                //     flexDirection: 'column',\r\n                                                //     alignItems: 'flex-start',\r\n                                                //     overflow: 'hidden'\r\n                                                // }}\r\n                                            >\r\n                                                <div>{item.projectName}</div>\r\n                                            </FlexboxGrid.Item>\r\n                                            <FlexboxGrid.Item\r\n                                                colspan={6}\r\n                                                // style={{\r\n                                                //     flexDirection: 'column',\r\n                                                //     alignItems: 'flex-start',\r\n                                                //     overflow: 'hidden'\r\n                                                // }}\r\n                                            >\r\n                                                {/*<div>{item.projectOwner}</div>*/}\r\n                                            </FlexboxGrid.Item>\r\n                                            <FlexboxGrid.Item\r\n                                                // colspan={6}\r\n                                                style={{\r\n\r\n                                                }}\r\n                                            >\r\n                                                <Button onClick={()=>this.getProjectChart(item._id)}>View</Button>\r\n                                            </FlexboxGrid.Item>\r\n                                        </FlexboxGrid>\r\n                                    </List.Item>\r\n                                        :\r\n                                        <></>\r\n                                )}\r\n                            </List>\r\n                        </Dropdown.Item>\r\n                    </Dropdown>\r\n                </div>\r\n\r\n                {\r\n\r\n                    this.state.projects.length > 0 && this.state.showChart?\r\n                        <>\r\n                            {/*<h1>Projects</h1>*/}\r\n\r\n\r\n                            <Radar\r\n                                data={{\r\n                                    labels: this.state.nodes.labels,\r\n                                    datasets: [{\r\n                                        label:this.state.nodes.projectName,\r\n                                        data:this.state.nodes.data,\r\n                                        fill: true,\r\n                                        backgroundColor: 'rgba(255,99,132,0.2)',\r\n                                        borderColor: 'rgb(255,99,132)',\r\n                                        pointBackgroundColor: 'rgb(255, 99, 132)',\r\n                                        pointBorderColor: '#fff',\r\n                                        pointHoverBackgroundColor: '#fff',\r\n                                        pointHoverBorderColor: 'rgb(255, 99, 132)'\r\n                                    },\r\n                                    ]\r\n\r\n                                }}\r\n                                height={400}\r\n                                width={600}\r\n                                options={{\r\n                                    maintainAspectRatio: false,\r\n                                    elements:{\r\n                                        line: {\r\n                                            borderWidth: 3\r\n                                        }\r\n                                    },\r\n                                    scales:{\r\n                                        // gridLines:{\r\n                                        //     color: '#fff'\r\n                                        // },\r\n                                        r:{\r\n                                            angleLines:{\r\n                                                display: false\r\n                                            },\r\n\r\n                                            // suggestedMin:50,\r\n                                            // suggestedMax: 100\r\n                                        }\r\n                                    },\r\n                                }}\r\n                            />\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <h4>\r\n                                Select Project you want to view the Tasks stats for.\r\n                            </h4>\r\n                            <img alt=\"graph logo\" id=\"logoPic\" src={Logo}/>\r\n                        </>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default RadarChart;\r\n\r\n","import React from 'react' ;\r\nimport {Doughnut} from 'react-chartjs-2';\r\nimport axios from \"axios\";\r\nimport {Button, Dropdown, FlexboxGrid, List, Tooltip} from \"rsuite\";\r\nimport Logo from \"../img/Logo4.png\";\r\nimport '../css/Common.css'\r\n\r\nclass PieChart extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props) ;\r\n        this.state = {\r\n            currentProject:{},\r\n            projects:[],\r\n            task:[],\r\n            api:'http://localhost:9001',\r\n            showChart: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAllProjects() ;\r\n\r\n    }\r\n\r\n    getAllProjects=()=>{\r\n\r\n        axios.get(`${this.state.api}/project/getAllProjectsByUserEmail/${this.props.user.email}`,{\r\n            headers:{\r\n                authorization: this.props.user.token\r\n            }\r\n        })\r\n            .then((res)=>{\r\n                console.log('Success',res) ;\r\n                if (res.data.data !== undefined){\r\n                    this.setState({\r\n                        projects :res.data.data ,\r\n                    }) ;\r\n\r\n                }\r\n                else{\r\n                    // this.setState({\r\n                    //     loading:false\r\n                    // }) ;\r\n                    alert('No projects')\r\n                }\r\n\r\n            })\r\n            .catch((err)=>{\r\n\r\n                // this.setState({\r\n                //     loading:false\r\n                // }) ;\r\n                console.log('Error or Rejected',err)\r\n            })\r\n    }\r\n\r\n    getChartStats=(projId)=>{\r\n        if(this.state.projects.length > 0 ) {\r\n            this.setState({\r\n                showChart:true\r\n            })\r\n            console.log(\"get proj id\", this.state.projId)\r\n\r\n\r\n            axios.get(`${this.state.api}/project/statistics/donutChart/`+projId, {\r\n                headers: {\r\n                    authorization: this.props.user.token\r\n                }\r\n            }).then((res) => {\r\n                console.log('Stats Success', res.data.data);\r\n                if (res.data.data !== undefined) {\r\n                    this.setState({\r\n                        task: res.data.data,\r\n                        // loading:false\r\n\r\n                    });\r\n                }\r\n            })\r\n                .catch((err) => {\r\n                    console.log('Error or Rejected', err)\r\n                })\r\n        }\r\n    }\r\n\r\n    /***\r\n     * - Task name\r\n     * - Node name\r\n     *\r\n     * Show Project Names, click one project, get all nodes,\r\n     * click on node and show tasks in a form of pie chart\r\n     *\r\n     * @returns {JSX.Element}\r\n     *\r\n     */\r\n    render() {\r\n        if(this.state.task.notStartedTasks !== undefined ){\r\n            {console.log(\"tasks show\", this.state.task.inProgressTasks)}\r\n        }\r\n        return(\r\n            <>\r\n                <div>\r\n                    <h3>Project Sub-Tasks Statistics</h3>\r\n                    <Dropdown title={\"Projects\"}>\r\n                        <Dropdown.Item style={{minWidth:\"30vw\",marginRight:\"10%\"}}>\r\n                            <List hover>\r\n                                {this.state.projects.map((item,index)=>\r\n                                    item.projectOwner === this.props.user.email || item.permissions.includes(\"view statistics\") ?\r\n                                    <List.Item key={item['projectName']} index={index}>\r\n                                        <FlexboxGrid>\r\n                                            <FlexboxGrid.Item\r\n                                                colspan={6}\r\n                                            >\r\n                                                <div>{item.projectName}</div>\r\n                                            </FlexboxGrid.Item>\r\n                                            <FlexboxGrid.Item\r\n                                                colspan={6}\r\n                                            >\r\n                                                {/*<div>{item.projectOwner}</div>*/}\r\n                                            </FlexboxGrid.Item>\r\n                                            <FlexboxGrid.Item\r\n                                                // colspan={6}\r\n                                                // style={{\r\n                                                //\r\n                                                // }}\r\n                                            >\r\n                                                <Button onClick={()=>this.getChartStats(item._id)}>View</Button>\r\n                                            </FlexboxGrid.Item>\r\n                                        </FlexboxGrid>\r\n                                    </List.Item>\r\n                                :\r\n                                <></>)}\r\n                            </List>\r\n                        </Dropdown.Item>\r\n                    </Dropdown>\r\n                </div>\r\n                {\r\n                    this.state.projects.length > 0 && this.state.showChart ?\r\n                        <>\r\n                        <h5>{this.state.task.projectName}</h5>\r\n                    <Doughnut\r\n                        data={{\r\n                            labels: [\r\n                                'Not Started',\r\n                                'In-Progress',\r\n                                'Complete'\r\n                            ],\r\n                            datasets: [{\r\n                                label: this.state.task.projectName,\r\n                                data: this.state.task.data,\r\n                                backgroundColor: [\r\n                                    'rgb(255,3,3)',\r\n                                    'rgb(234,135,27)',\r\n                                    'rgb(73,239,18)'\r\n                                ],\r\n                                hoverOffset: 4\r\n                            }]\r\n                        }}\r\n                        height={400}\r\n                        width={600}\r\n                        options={{\r\n                            maintainAspectRatio: false,\r\n                        }}\r\n                    />\r\n                            {\r\n                                this.state.task.notStartedTasks !== undefined && this.state.task.notStartedTasks !== [] ?\r\n\r\n\r\n                                    <div id=\"dropdown-div\">\r\n                                        <Dropdown id=\"dropdown-title\" title={\"Not Started\"}>\r\n                                            {this.state.task.notStartedTasks.map((item, index) => (\r\n                                                <>\r\n                                                    <Dropdown.Item key={item} index={index}>{item.title}</Dropdown.Item>\r\n                                                </>\r\n                                            ))}\r\n                                        </Dropdown>\r\n                                    </div>\r\n                                    : <></>\r\n                            }\r\n                            {\r\n                                this.state.task.inProgressTasks !== undefined && this.state.task.inProgressTasks !== [] ?\r\n\r\n\r\n                                    <div id=\"dropdown-div-2\">\r\n                                        <Dropdown id=\"dropdown-title\" title={\"In Progress\"}>\r\n                                            {this.state.task.inProgressTasks.map((item, index) => (\r\n                                                <Dropdown.Item key={item} index={index}>{item.title}</Dropdown.Item>\r\n                                            ))}\r\n                                        </Dropdown>\r\n                                    </div>\r\n                                    : <></>\r\n                            }\r\n                            {\r\n                                this.state.task.finishedTasks !== undefined && this.state.task.finishedTasks !== [] ?\r\n\r\n\r\n                                    <div id=\"dropdown-div-3\">\r\n                                        <Dropdown id=\"dropdown-title\" title={\"Complete\"}>\r\n                                            {this.state.task.finishedTasks.map((item, index) => (\r\n                                                <Dropdown.Item key={item} index={index}>{item.title}</Dropdown.Item>\r\n                                            ))}\r\n                                        </Dropdown>\r\n                                    </div>\r\n                                    : <></>\r\n                            }\r\n\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <h4>\r\n                                Select project you want to view the sub-tasks progress for.\r\n                            </h4>\r\n                            <img alt=\"graph logo\" id=\"logoPic\" src={Logo}/>\r\n                        </>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default PieChart;","import React from \"react\";\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport axios from \"axios\";\r\nimport \"../css/Calendar.css\"\r\n\r\nclass Calendar extends React.Component{\r\n    constructor(props){\r\n        super(props) ;\r\n        this.state = {\r\n            api: 'http://localhost:9001',\r\n            projects: [],\r\n            date:undefined,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getUserProjects() ;\r\n        //this.getTodoList();\r\n    }\r\n\r\n    getUserProjects=()=>{\r\n        axios.get(`${this.state.api}/project/getAllProjectsByUserEmail/${this.props.user.email}`,{\r\n            headers:{\r\n                authorization: this.props.user.token\r\n            }\r\n        })\r\n            .then((res)=>{\r\n                if (res.data.data !== undefined){\r\n                    this.setState({\r\n                        projects :res.data.data ,\r\n\r\n                    }) ;\r\n                }\r\n                else{\r\n                    // this.setState({\r\n                    //     loading:false\r\n                    // }) ;\r\n                    // alert('No projects')\r\n                }\r\n\r\n            })\r\n            .catch((err)=>{\r\n\r\n                // this.setState({\r\n                //     loading:false\r\n                // }) ;\r\n                console.log('Error or Rejected',err)\r\n            })\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.projects.length > 0) {\r\n            console.log(this.state.projects)\r\n            let data =[];\r\n            this.state.projects.map((item,index)=>\r\n                data[index] = {title: this.state.projects[index].projectName, date: this.state.projects[index].dueDate}\r\n            )\r\n\r\n            // const data = [\r\n            //         {title: this.state.projects[0].projectName, date: this.state.projects[0].dueDate},\r\n            //         {title: 'event 2', date: '2021-09-11'}\r\n            // ]\r\n            console.log(data)\r\n\r\n            return (\r\n                <div>\r\n                    <FullCalendar\r\n                        plugins={[dayGridPlugin]}\r\n                        initialView=\"dayGridMonth\"\r\n                        weekends={true}\r\n                        events={data}\r\n                    />\r\n\r\n                </div>\r\n            );\r\n        }else{\r\n            return (\r\n                <>\r\n                    <FullCalendar plugins={[dayGridPlugin]} initialView=\"dayGridMonth\" />\r\n                </>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default Calendar;","import React from 'react' ;\r\nimport {Bar} from 'react-chartjs-2';\r\nimport axios from \"axios\";\r\nimport {Button, Dropdown, FlexboxGrid, List} from \"rsuite\";\r\nimport Logo from \"../img/Logo4.png\";\r\nimport '../css/Common.css'\r\n\r\nclass BarChart extends React.Component{\r\n    constructor(props){\r\n        super(props) ;\r\n        this.state = {\r\n            currentProject:{},\r\n            projects:[],\r\n            task:[],\r\n            api:'http://localhost:9001',\r\n            showChart: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAllProjects() ;\r\n\r\n    }\r\n    getAllProjects=()=>{\r\n\r\n        axios.get(`${this.state.api}/project/getAllProjectsByUserEmail/${this.props.user.email}`,{\r\n            headers:{\r\n                authorization: this.props.user.token\r\n            }\r\n        })\r\n            .then((res)=>{\r\n                console.log('Success',res) ;\r\n                if (res.data.data !== undefined){\r\n                    this.setState({\r\n                        projects :res.data.data ,\r\n                    }) ;\r\n\r\n                }\r\n                else{\r\n                    // this.setState({\r\n                    //     loading:false\r\n                    // }) ;\r\n                    alert('No projects')\r\n                }\r\n\r\n            })\r\n            .catch((err)=>{\r\n\r\n                // this.setState({\r\n                //     loading:false\r\n                // }) ;\r\n                console.log('Error or Rejected',err)\r\n            })\r\n    }\r\n    getChartStats=(projId)=>{\r\n        if(this.state.projects.length > 0 ) {\r\n            this.setState({\r\n                showChart:true\r\n            })\r\n            console.log(\"get proj id\", this.state.projId)\r\n\r\n\r\n            axios.get(`${this.state.api}/project/statistics/barchart/`+projId+`/`+this.props.user.email, {\r\n                headers: {\r\n                    authorization: this.props.user.token\r\n                }\r\n            }).then((res) => {\r\n                console.log('Stats Assigned Success', res.data.data);\r\n                if (res.data.data !== undefined) {\r\n                    this.setState({\r\n                        task: res.data.data,\r\n                        // loading:false\r\n\r\n                    });\r\n                }\r\n            })\r\n                .catch((err) => {\r\n                    console.log('Error or Rejected', err)\r\n                })\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <>\r\n                <div>\r\n                    <h3> Assigned Sub-Tasks Statistics</h3>\r\n                    <Dropdown title={\"Projects\"}>\r\n                        <Dropdown.Item style={{minWidth:\"30vw\",marginRight:\"10%\"}}>\r\n                            <List hover>\r\n                                {this.state.projects.map((item,index)=>\r\n                                    <List.Item key={item['projectName']} index={index}>\r\n                                        <FlexboxGrid>\r\n                                            <FlexboxGrid.Item\r\n                                                colspan={6}\r\n                                            >\r\n                                                <div>{item.projectName}</div>\r\n                                            </FlexboxGrid.Item>\r\n                                            <FlexboxGrid.Item\r\n                                                colspan={6}\r\n                                            >\r\n                                                {/*<div>{item.projectOwner}</div>*/}\r\n                                            </FlexboxGrid.Item>\r\n                                            <FlexboxGrid.Item\r\n                                                // colspan={6}\r\n                                                // style={{\r\n                                                //\r\n                                                // }}\r\n                                            >\r\n                                                <Button onClick={()=>this.getChartStats(item._id)}>View</Button>\r\n                                            </FlexboxGrid.Item>\r\n                                        </FlexboxGrid>\r\n                                    </List.Item>\r\n                                )}\r\n                            </List>\r\n                        </Dropdown.Item>\r\n                    </Dropdown>\r\n                </div>\r\n                {\r\n                    this.state.projects.length > 0 && this.state.showChart ?\r\n                        <>\r\n                            <h5>{this.state.task.projectName}</h5>\r\n                            <Bar data={{\r\n                                labels: [\r\n                                    'Not Started',\r\n                                    'In-Progress',\r\n                                    'Complete'\r\n                                ],\r\n                                datasets: [{\r\n                                    label: this.state.task.projectName,\r\n                                    data: this.state.task.data,\r\n                                    backgroundColor: [\r\n                                        'rgba(255, 99, 132, 0.2)',\r\n                                        'rgba(255, 159, 64, 0.2)',\r\n                                        'rgba(137,255,86,0.2)'\r\n                                    ],\r\n                                    borderColor: [\r\n                                        'rgb(255, 99, 132)',\r\n                                        'rgb(255, 159, 64)',\r\n                                        'rgb(137, 255, 86)',\r\n                                    ],\r\n                                    borderWidth: 1\r\n\r\n                                }]\r\n\r\n                            }}\r\n\r\n                            />\r\n                            {\r\n                                this.state.task.notStartedTasks !== undefined && this.state.task.notStartedTasks !== [] ?\r\n\r\n\r\n                                    <div className=\"dropdown-div-bar\" id=\"dropdown-div\">\r\n                                        <Dropdown id=\"dropdown-title\" title={\"Not Started\"}>\r\n                                            {this.state.task.notStartedTasks.map((item, index) => (\r\n                                                <Dropdown.Item key={item} index={index}>{item.title}</Dropdown.Item>\r\n                                            ))}\r\n                                        </Dropdown>\r\n                                    </div>\r\n                                    : <></>\r\n                            }\r\n                            {\r\n                                this.state.task.inProgressTasks !== undefined && this.state.task.inProgressTasks !== [] ?\r\n\r\n\r\n                                    <div className=\"dropdown-div-bar-2\" id=\"dropdown-div-2\">\r\n                                        <Dropdown id=\"dropdown-title\" title={\"In-Progress\"}>\r\n                                            {this.state.task.inProgressTasks.map((item, index) => (\r\n                                                <Dropdown.Item key={item} index={index}>{item.title}</Dropdown.Item>\r\n                                            ))}\r\n                                        </Dropdown>\r\n                                    </div>\r\n                                    : <></>\r\n                            }\r\n                            {\r\n                                this.state.task.finishedTasks !== undefined && this.state.task.finishedTasks !== [] ?\r\n\r\n\r\n                                    <div className=\"dropdown-div-bar-3\" id=\"dropdown-div-3\">\r\n                                        <Dropdown id=\"dropdown-title\" title={\"Complete\"}>\r\n                                            {this.state.task.finishedTasks.map((item, index) => (\r\n                                                <Dropdown.Item key={item} index={index}>{item.title}</Dropdown.Item>\r\n                                            ))}\r\n                                        </Dropdown>\r\n                                    </div>\r\n                                    : <></>\r\n                            }\r\n                            {/*{*/}\r\n\r\n                            {/*    <>*/}\r\n                            {/*    <div className=\"dropdown-div-bar\" id=\"dropdown-div\">*/}\r\n                            {/*        <Dropdown id=\"dropdown-title\" title={\"Not Started\"}>*/}\r\n                            {/*            <Dropdown.Item>Task 1 task 1</Dropdown.Item>*/}\r\n                            {/*            <Dropdown.Item>Task 6</Dropdown.Item>*/}\r\n                            {/*            <Dropdown.Item>Task 3</Dropdown.Item>*/}\r\n                            {/*        </Dropdown>*/}\r\n                            {/*    </div>*/}\r\n                            {/*        <div className=\"dropdown-div-bar-2\" id=\"dropdown-div-2\">*/}\r\n                            {/*        <Dropdown id=\"dropdown-title\" title={\"In-Progress\"}>*/}\r\n                            {/*        <Dropdown.Item>Task 4</Dropdown.Item>*/}\r\n                            {/*        </Dropdown>*/}\r\n                            {/*        </div>*/}\r\n                            {/*        <div className=\"dropdown-div-bar-3\" id=\"dropdown-div-3\">*/}\r\n                            {/*        <Dropdown id=\"dropdown-title\" title={\"Complete\"}>*/}\r\n                            {/*        <Dropdown.Item>Task 5</Dropdown.Item>*/}\r\n                            {/*        <Dropdown.Item>Task 7</Dropdown.Item>*/}\r\n                            {/*        </Dropdown>*/}\r\n                            {/*        </div>*/}\r\n                            {/*    </>*/}\r\n                            {/*}*/}\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <h4>\r\n                                Select project you want to view your assigned sub-tasks progress for.\r\n                            </h4>\r\n                            <img alt=\"graph logo\" id=\"logoPic\" src={Logo}/>\r\n                        </>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default BarChart","import React from 'react' ;\r\nimport '../css/Dashboard.css' ;\r\nimport {Button, Dropdown, Icon, Nav, Sidenav} from 'rsuite';\r\nimport ProjectManager from './ProjectManager';\r\nimport { Link,Switch,Route, withRouter, Redirect} from 'react-router-dom' ;\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as IoIcons from 'react-icons/md'\r\nimport Profile from \"./Profile\";\r\nimport Logout from \"./Logout\";\r\nimport Logo from \"../img/Logo4.png\";\r\nimport Kanban from './Kanban';\r\nimport { connect} from 'react-redux' ;\r\nimport RadarChart from \"./RadarChart\";\r\nimport PieChart from \"./PieChart\";\r\nimport Calendar from \"./Calendar\";\r\nimport BarChart from \"./BarChart\";\r\n\r\n\r\nclass Dashboard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            show:true,\r\n            showSideBar: true,\r\n            redirect:true,\r\n            createResponse:'',\r\n            viewOnly:false\r\n            \r\n        }\r\n    }\r\n\r\n    handleSideBar=()=>{\r\n        this.setState({\r\n            showSideBar: !this.state.showSideBar\r\n        })\r\n    }\r\n\r\n    profileModalRef=(obj)=>{\r\n        // console.log('ref0',obj) ;\r\n\r\n        this.showProfile = obj && obj.handleShow;\r\n    }\r\n    changeRedirect = (link)=>{\r\n        this.setState({\r\n            redirect:!this.state.redirect \r\n        }) ; \r\n        return <Redirect to={link} />\r\n    }\r\n\r\n    showP=()=>{\r\n\r\n        this.showProfile();\r\n    }\r\n\r\n    reloadProjectsInManager=(obj)=>{\r\n        console.log('ref',obj) ;\r\n        \r\n    }\r\n\r\n    render(){\r\n        const {match} =this.props ;\r\n        const picture = this.props.authUser.picture;\r\n        // console.log(\"match\",match)\r\n        return(\r\n            //  <Router>            \r\n                <div data-testid=\"main-container-id\" className=\"main-container\">\r\n                    {/* {this.reloadProjectsInManager()} */}\r\n                    <Profile user={this.props.authUser} ref={this.profileModalRef} />\r\n                    <nav id=\"nav-bar\"  >\r\n                        <div style={{display:\"table-row\"}}>\r\n                            <div id=\"side-bar-button\">\r\n                                {\r\n                                    this.state.showSideBar === true ?\r\n                                        <IoIcons.MdClose id=\"btn-side-bar\" onClick={this.handleSideBar} />\r\n                                        :\r\n                                    <FaIcons.FaBars id=\"btn-side-bar\" onClick={this.handleSideBar} />\r\n\r\n\r\n                                }\r\n                            </div>\r\n                            <img alt=\"graph logo\" id=\"logo-pic\" src={Logo}/>\r\n\r\n                            {/*<div id=\"two-btn\">*/}\r\n                            {/*    <img src={picture} />*/}\r\n                                <Button id=\"profile-btn\" onClick={this.showP}>Profile</Button>\r\n                                <Logout/>\r\n                            {/*</div>*/}\r\n                        </div>\r\n\r\n\r\n\r\n                    </nav>\r\n                    <div id=\"content\">\r\n                        {\r\n                            this.state.showSideBar === true ?\r\n\r\n                                <div id=\"sidebar\">\r\n                                    <Sidenav collapsible={\"true\"} id=\"side-nav\">\r\n                                        <Sidenav.Body>\r\n                                            <Nav>\r\n                                                <Nav.Item onClick={()=>this.changeRedirect(`${match.url}/manager`)}\r\n                                                         id=\"nav-option\"\r\n                                                          icon={<Icon icon=\"dashboard\"/>}\r\n                                                          componentClass={Link}\r\n                                                           to=\"/dashboard\" >Dashboard</Nav.Item>\r\n                                                {\r\n                                                    this.state.viewOnly ?\r\n                                                    <Dropdown title=\"View Only\">\r\n                                                        <Dropdown.Item>Own Project</Dropdown.Item>\r\n                                                        <Dropdown.Item>Shared Project</Dropdown.Item>\r\n                                                    </Dropdown>\r\n                                                        :\r\n                                                        <></>\r\n                                                }\r\n\r\n                                                <Nav.Item id=\"nav-option\"\r\n                                                          icon={<Icon icon=\"calendar\"/>}\r\n                                                          componentClass={Link}\r\n                                                          to={`${match.url}/modal`} >Calendar</Nav.Item>\r\n\r\n                                                <Nav.Item id=\"nav-option\"\r\n                                                          icon={<Icon icon=\"tasks\"/>}\r\n                                                          componentClass={Link}\r\n                                                          to={`${match.url}/kanban`} >Kanban</Nav.Item>\r\n\r\n                                                <Dropdown id=\"nav-option\" title=\"Statistics\" icon={<Icon icon=\"bar-chart\"/>}>\r\n                                                    <Dropdown.Item id=\"nav-option\" componentClass={Link}\r\n                                                                   to={`${match.url}/radarChart`}>Project Tasks</Dropdown.Item>\r\n                                                    <Dropdown.Item id=\"nav-option\" componentClass={Link}\r\n                                                    to={`${match.url}/pieChart`}>Project Subtask</Dropdown.Item>\r\n                                                    <Dropdown.Item id=\"nav-option\" componentClass={Link}\r\n                                                                   to={`${match.url}/barChart`}>Assigned Task</Dropdown.Item>\r\n                                                </Dropdown>\r\n\r\n                                            </Nav>\r\n\r\n                                        </Sidenav.Body>\r\n                                    </Sidenav>\r\n                                </div>\r\n                                :\r\n                                <></>\r\n                        }\r\n                        {/*main content div contains all other pages*/}\r\n                        <div id=\"main-content\">\r\n                            <Switch>\r\n                                <Route path={`${match.path}/modal`} exact>\r\n                                    {/*<Modal user={this.props.authUser} />*/}\r\n                                    <Calendar user={this.props.authUser} />\r\n\r\n                                </Route>\r\n                                <Route path={`${match.path}/manager`} render={()=>{\r\n                                    return <ProjectManager />\r\n                                }} />\r\n                                <Route path={`${match.path}/kanban`} render={()=>{\r\n                                    return <Kanban user={this.props.authUser}/> }}/>\r\n                                <Route path={`${match.path}/radarChart`} exact>\r\n                                    <RadarChart user={this.props.authUser} />\r\n                                </Route>\r\n                                <Route path={`${match.path}/pieChart`} exact>\r\n                                    <PieChart user={this.props.authUser} />\r\n                                </Route>\r\n                                <Route path={`${match.path}/barChart`} exact>\r\n                                    <BarChart user={this.props.authUser} />\r\n                                </Route>\r\n                                    \r\n                            {\r\n                                this.state.redirect?this.changeRedirect(`${match.url}/manager`):\"\"\r\n                            }\r\n                                \r\n                            </Switch>\r\n\r\n                        </div>\r\n\r\n                </div>\r\n            </div>\r\n            //  </Router>\r\n        )\r\n    }\r\n}\r\nfunction updateUserToken(token){\r\n    return {\r\n      type:'UPDATE_TOKEN' ,\r\n      payload: {\r\n        token:token\r\n      }\r\n    }\r\n  }\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        loggedUser:state.loggedUser\r\n    } ;\r\n  }\r\n  \r\n\r\nconst mapDispatchToProps = {\r\n    updateUserToken,\r\n  }\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(Dashboard)) ;","import React from 'react';\r\nimport {useAuth0} from '@auth0/auth0-react';\r\nimport {Button} from \"rsuite\";\r\n\r\nconst LoginBtn=()=>{\r\n    const {loginWithRedirect} = useAuth0();\r\n    return(\r\n        <Button onClick={()=>loginWithRedirect()} id='signin-btn'>Sign In or Sign Up</Button>\r\n    )\r\n}\r\nexport default LoginBtn;","export default __webpack_public_path__ + \"static/media/graph_2.4614f5ac.svg\";","export default __webpack_public_path__ + \"static/media/dashboard.c6964198.jpg\";","export default __webpack_public_path__ + \"static/media/createp.dd38ea6f.jpg\";","export default __webpack_public_path__ + \"static/media/graph.52d5b2d2.jpg\";","export default __webpack_public_path__ + \"static/media/stats1.3c5dbd50.jpg\";","export default __webpack_public_path__ + \"static/media/stats2.c6147eb6.jpg\";","import React from 'react'\r\nimport landingSnap from \"../img/landing.png\";\r\nimport {Button, Carousel, Loader, Modal} from \"rsuite\";\r\nimport \"rsuite/dist/styles/rsuite-dark.min.css\"\r\nimport '../css/Landing.css';\r\nimport {useAuth0} from '@auth0/auth0-react';\r\nimport JSONPretty from 'react-json-pretty';\r\nimport LoginBtn from \"./LoginBtn\";\r\nimport Graph_Picture from \"../img/graph_2.svg\";\r\nimport dashboard from \"../img/dashboard.jpg\";\r\nimport createP from \"../img/createp.jpg\";\r\nimport graph from \"../img/graph.jpg\";\r\nimport stats1 from \"../img/stats1.jpg\";\r\nimport stats2 from \"../img/stats2.jpg\";\r\n\r\nfunction Landing({logInvalid}) {\r\n\r\n        const {user, isAuthenticated, isLoading} = useAuth0();\r\n        console.log(\"user\", user)\r\n        \r\n\r\n        if(isLoading) return <Loader speed=\"fast\" content=\"Loading\" />\r\n\r\n\r\n        return(\r\n\r\n            <div data-testid=\"main-landing-id\" id=\"main-div-landing\">\r\n                <div id=\"left-div\">\r\n                        <img id=\"graph-picture\" src={Graph_Picture} alt=\"graph-picture\"/>\r\n\r\n                        <Carousel id=\"carousel-id\" autoplay shape='bar' className=\"custom-slider\">\r\n                                <img src={dashboard} />\r\n                                <img src={createP} />\r\n                                <img src={graph} />\r\n                                <img src={stats1} />\r\n                                <img src={stats2} />\r\n\r\n                        </Carousel>\r\n                </div>\r\n                <div id=\"right-div\">\r\n                        <h1 id=\"pageName\">GRAPH PATH </h1>\r\n                        <p className=\"aboutText introText\" >\r\n                                Graph path is an interactive graph based project Management tool. <br/>\r\n                                It aims to organise tasks of a project on a interactive and user friendly graph.\r\n                        </p>\r\n\r\n                        <div id=\"landing-btn\">\r\n                                {\r\n                                        !isAuthenticated && (\r\n                                            <LoginBtn/>\r\n                                        )\r\n                                }\r\n                                {\r\n                                        isAuthenticated && user.email_verified && (\r\n                                            <>\r\n                                                    {/*<JSONPretty data={user} />*/}\r\n                                                    <Button onClick={()=>logInvalid(user)} id='signin-btn'>Proceed</Button>\r\n\r\n                                            </>\r\n                                        )\r\n\r\n                                }\r\n                        </div>\r\n\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n           // <div>\r\n           //     <div  >\r\n           //         <h1 id=\"pageName\">GRAPH PATH </h1>\r\n           //         <p className=\"aboutText introText\" >\r\n           //             Graph path is an interactive graph based project Management tool. <br/>\r\n           //             It aims to organise tasks of a project on a interactive and user friendly graph.\r\n           //           </p>\r\n           //         <img id=\"landing-graph\" src={landingSnap} alt=\"Logo\"/>\r\n           //\r\n           //         <p className=\"aboutText\">\r\n           //             This system provides a way to have all the tasks of a project that needs to be done  represented as a graph.\r\n           //              <br/><br/>\r\n           //\r\n           //             The graph aims to make it easier to understand the dependencies between the task of the project.\r\n           //             <br/><br/>\r\n           //             The specific type of graph should be a Directed Acyclic Graph since it would be easy to read,\r\n           //             understand and it would provide a very user friendly interface to interact with.\r\n           //         </p>\r\n           //\r\n           //     </div>\r\n           //\r\n           //     {/*<Carousel autoplay className=\"custom-slider\">*/}\r\n           //     {/*     <div>*/}\r\n           //     {/*         <p>1</p>*/}\r\n           //     {/*         <p>11</p>*/}\r\n           //     {/*     </div>*/}\r\n           //     {/*    <div>*/}\r\n           //     {/*        <p>2</p>*/}\r\n           //     {/*        <p>22</p>*/}\r\n           //     {/*    </div>*/}\r\n           //     {/*    <div>*/}\r\n           //     {/*        <p>3</p>*/}\r\n           //     {/*        <p>33</p>*/}\r\n           //\r\n           //     {/*    </div>*/}\r\n           //\r\n           //\r\n           //\r\n           //     {/*</Carousel>*/}\r\n           //\r\n           //\r\n           //\r\n\r\n           //\r\n           //\r\n           //\r\n\r\n           //\r\n           //     {console.log(user)}\r\n           //\r\n           // </div>\r\n        );\r\n}\r\n\r\nexport default Landing;","import { useHistory } from \"react-router\";\r\n\r\nconst NotFound = ()  =>{\r\n    const history = useHistory() ;\r\n    console.log('Not FOund ',history)\r\n    \r\n    return(\r\n        <h1>\r\n            404 Not Found {history.location.pathname}\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default NotFound ; ","import {React,Component} from \"react\";\r\n//import \"rsuite/dist/styles/rsuite-default.css\" ;\r\nimport \"rsuite/dist/styles/rsuite-dark.min.css\" ;\r\n\r\nimport {HashRouter as Router,Switch,Route, Redirect} from 'react-router-dom' ;\r\nimport Dashboard from \"./Dashboard\";\r\nimport Landing from './Landing' ;\r\nimport NotFound from \"./NotFound\";\r\nimport axios from \"axios\";\r\nimport { connect} from 'react-redux' ;\r\n\r\n\r\n\r\nclass CustomHeader extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n\r\n            show1:false,\r\n            show2:false,\r\n\r\n            show:false,\r\n            openSignin:false,\r\n            logged:false,\r\n            loggedUser:{}\r\n\r\n        }\r\n        this.close = this.close.bind(this);\r\n        this.open = this.open.bind(this);\r\n    }\r\n    changeLogStatus=(user)=>{\r\n        console.log('logged',user)\r\n        \r\n            //get token\r\n            let data = {\r\n                email: user.email ,\r\n                userObject:user\r\n            }\r\n\r\n            axios.post(`http://localhost:9001/user/requestToken`,data)\r\n            .then((res)=>{\r\n                // console.log('from token ',res)\r\n                \r\n                let authUser = {...user} ;\r\n                // logInvalid(user)\r\n                if (res.headers.authorization){\r\n                    authUser['token'] =res.headers.authorization ;\r\n                    console.log('Authed',authUser) ;\r\n                    this.props.createUser(authUser);\r\n                    this.setState({\r\n                        logged:!this.state.logged,\r\n                        loggedUser:authUser , \r\n                    }) ;\r\n                }\r\n                else{\r\n                    alert(res.message) ;\r\n                }\r\n     \r\n            })\r\n            .catch((err)=>{\r\n                console.log('for real',err) ;\r\n            })\r\n    \r\n    }\r\n\r\n    open(){\r\n        this.setState({ show1: true,show2:false})\r\n    }\r\n    close(){\r\n        this.setState({show1: false})\r\n    }\r\n    signInMododal = ()=>{\r\n        this.setState({\r\n            openSignin:!this.state.openSignin\r\n        }) ;\r\n        \r\n    }\r\n    render(){\r\n        // console.log('current',this.props)\r\n        return (\r\n            <div data-testid=\"tidHeader\">\r\n                <Router>\r\n\r\n                  \r\n                    <Switch>\r\n            \r\n                        <Route exact path=\"/\" render={()=>{\r\n                            return <>\r\n                            <Landing logInvalid={this.changeLogStatus} />\r\n                            {\r\n                                this.state.logged?<Redirect to=\"/dashboard\"/>:\"\"\r\n                            }\r\n                            </> \r\n                        }} />\r\n                       \r\n                        <Route path='/dashboard' render={()=>{\r\n                            return(\r\n                                <>\r\n                                    <Dashboard authUser={this.state.loggedUser}/>\r\n                                    {\r\n                                        !this.state.logged?<Redirect to=\"/\"/>:\"\"\r\n                                    }\r\n                                </>\r\n                            )\r\n                        }}\r\n                        />\r\n                    {\r\n                       !this.state.logged?<Redirect to=\"/\"/>:\"\"\r\n                    }\r\n                  \r\n                                      \r\n                    <Route component={NotFound} />\r\n\r\n               \r\n                    </Switch>\r\n            </Router>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nfunction createUser(user){\r\n    // console.log('action',user)\r\n    return {\r\n      type:'CREATE_USER',\r\n      payload:user\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        loggedUser:state.loggedUser\r\n    } ;\r\n  }\r\n  \r\n\r\nconst mapDispatchToProps = {\r\n    createUser\r\n  }\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CustomHeader) ;","import { createStore,} from 'redux' ;\r\n\r\nconst initial = {\r\n    loggedUser: {\r\n      email:'',\r\n      token:''\r\n    } \r\n  }\r\n//reducer\r\nfunction reducer(state = initial,action){\r\n    // console.log('Reducer to',action.type)\r\n    switch(action.type ){\r\n      case 'UPDATE_TOKEN':\r\n        let auth = {\r\n          token: action.payload.token\r\n        }\r\n        let newState = Object.assign(state.loggedUser,auth) ;\r\n        console.log('after update',newState)\r\n        return {\r\n          loggedUser:newState} ;\r\n      case  'CREATE_USER' :{\r\n        return {\r\n          loggedUser:action.payload}\r\n      }\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n  const store = createStore(reducer)\r\n  \r\nexport default store ; ","import React from 'react';\r\nimport './css/App.css';\r\n\r\n//import Register from './Register'\r\n\r\nimport Header from './components/Header' ;\r\nimport {HashRouter as Router} from 'react-router-dom' ;\r\nimport { Provider} from 'react-redux' ;\r\nimport store from './components/Helpers/Reducer';\r\n\r\n\r\nclass App extends React.Component {\r\n    render(){\r\n    return (\r\n      <Provider store={store}>\r\n          <Router>\r\n            <div className=\"App\" data-testid=\"tidApp\">\r\n                <Header />\r\n                {/* <ConnectedHeader /> */}\r\n            </div>\r\n           </Router>\r\n       </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Auth0Provider} from \"@auth0/auth0-react\";\r\n\r\nconst domain = process.env.REACT_APP_AUTH0_DOMAIN;\r\nconst clientId = process.env.REACT_APP_AUTH0_CLIENT_ID;\r\n\r\nReactDOM.render(\r\n  <Auth0Provider\r\n    domain = {domain}\r\n    clientId = {clientId}\r\n    redirectUri={window.location.origin}\r\n  >\r\n    <App />\r\n  </Auth0Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}